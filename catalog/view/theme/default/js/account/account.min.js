window.addEventListener('load', function() {
  function AccountAccountComponent(context) {
    BaseComponent.call(this, context);

    var self = this;

    self.init = function () {
      initOrderHistory();
      return self;
    };


    function initOrderHistory() {
      //	Download file with order info
      $('#orderHistoryTable').on('click', '#orderReceiptDownload', function (e) {
        e.preventDefault();
        _request({
          url: 'index.php?route=account/account/downloadOrderInfo',
          data: {
            transferData: {
              orderId: e.currentTarget.dataset.orderId
            }
          },
          success: function (response) {
            if (response.code !== 200) {
              console.warn(response.message);
              return;
            }

            var url = response.data.downloadUrl,
              fileName = response.data.fileName;

            var eDownloadLink = $('\
                <a \
                  href="' + url + '"\
                  download="' + fileName + '"\
                  class="ego-download-order-info"\
                ></a>\
                ');

            $(e.target)
              .parent()
              .append(eDownloadLink);
            eDownloadLink
              .get(0)
              .click();
            eDownloadLink.remove();
          }
        });
      });
    }


    //endregion

    return self;
  }

  AccountAccountComponent.prototype = Object.create(BaseComponent.prototype);
  AccountAccountComponent.prototype.constructor = AccountAccountComponent;

  $('[data-toggle=\'tooltip\']').tooltip({container: 'body'});

  var component = new AccountAccountComponent({elementRef: $('#content')});
  component.init();

  // -------------------------

  const pikadayOptions = {
    firstDay: 1,
    onSelect: () => updateOrderBalanceTable(),
    toString(date, format) {
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      if (format === 'YYYYMMDD') return `${year}${month}${day}`
      return `${day}.${month}.${year}`;
    },
    parse(dateString) {
      const parts = dateString.split('.');
      const day = parseInt(parts[0], 10);
      const month = parseInt(parts[1], 10) - 1;
      const year = parseInt(parts[2], 10);
      return new Date(year, month, day);
   },
    i18n: {
      previousMonth: 'Предыдущий Месяц',
      nextMonth: 'Следующий Месяц',
      months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
      weekdays: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
      weekdaysShort: ['Вск', 'Пнд', 'Втр', 'Срд', 'Чтв', 'Птн', 'Сбт']
    }
  }

  const balanceDateFrom = new Pikaday({
    ...pikadayOptions,
    field: document.getElementById('balance-date-from'),
  });

  const balanceDateTo = new Pikaday({
    ...pikadayOptions,
    field: document.getElementById('balance-date-to'),
  });

  // -------------------------

  const dataTableOptions = {
    searching: false,
    ordering: false,
    autoWidth: false,
    info: false,
    lengthChange: false,
    language: {
      emptyTable: 'Записи отсутствуют',
      paginate: {
        first: 'Первая',
        previous: 'Предыдущая',
        next: 'Следующая',
        last: 'Последняя'
      },
    },
  }

  const orderBalanceTable = $('#order-balance-table').DataTable(dataTableOptions);

  const updateOrderBalanceTable = async () => {
    balanceDateFrom.setMaxDate(balanceDateTo.getDate());
    balanceDateTo.setMinDate(balanceDateFrom.getDate());
    const url = '/index.php?route=account/account/balance';
    const dateFrom = balanceDateFrom.toString('YYYYMMDD');
    const dateTo = balanceDateTo.toString('YYYYMMDD');
    const body = JSON.stringify({ dateFrom, dateTo });
    const response = await fetch(url, { method: 'POST', body });
    const data = await response.json();

    orderBalanceTable.clear();
    orderBalanceTable.draw();

    data.forEach(item => orderBalanceTable.row.add($(`
      <tr
        class="${!item.url ? 'total-row' : ''}"
        onclick=" ${item.url} && window.open('${item.url}')"
      >
        <td>${item.name}</td>
        <td>${item.total}</td>
        <td>${item.balance}</td>
      </tr>
    `)[0]).draw());
  };

  updateOrderBalanceTable();

  // -------------------------

  $('#orderHistoryTable').DataTable({ ...dataTableOptions,  pageLength: 20 });

  // -------------------------

  const clickTab = () => {
    const activeTab = document.getElementById(`tab-${window.location.hash.slice(1)}`);
    if (activeTab) activeTab.click();
  }

  clickTab();

  window.onhashchange = clickTab;

  // -----------------------

  const phone = document.getElementById('phone');

  const onProfileSave = async evt => {
    evt.preventDefault();
    const body = JSON.stringify({
      firstName: document.getElementById('firstName').value,
      lastName: document.getElementById('lastName').value,
      phone: phone.value.replace(/\(|\)|-|\+|_/g, ''),
      email: document.getElementById('email').value,
      password: document.getElementById('password').value,
      region: document.getElementById('npRegion').value,
      city: document.getElementById('npCity').value,
      warehouse: document.getElementById('npWarehouse').value
    });

    const url = 'index.php?route=account/account/save';
    try {
      await fetch(url, { method: 'POST', body });
      window.uiService.popup
        .setHeader('Информация')
        .setBody('Профиль успешно обновлен')
        .hideFooter()
        .open();
    } catch (err) {
      console.error(err);
    }
  }

  const formProfileSave = document.getElementById('formProfileSave');
  formProfileSave.addEventListener('submit', onProfileSave);

  // -----------------------

  const onFocusPhone = ({ target }) => {
    const index = target.value.indexOf('_');
    if (index !== -1) target.setSelectionRange(index, index);
  }

  phone.addEventListener('focus', onFocusPhone);
  phone.addEventListener('click', onFocusPhone);

  phone.value = phone.value.replace(/^38/, '');
  const mask = ['+', '3', '8','(', /\d/, /\d/, /\d/, ')', /\d/, /\d/, /\d/, '-', /\d/, /\d/, '-', /\d/, /\d/];
  vanillaTextMask.maskInput({ inputElement: phone, mask, showMask: true });
});
