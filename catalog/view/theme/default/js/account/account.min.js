window.addEventListener('load', function() {
  function AccountAccountComponent(context) {
    BaseComponent.call(this, context);

    var self = this;
    var data = {};

    /**
     * Init component
     *
     * @returns {AccountAccountComponent}
     */
    self.init = function () {
      initActions();
      initBalance();
      initOrderHistory();
      initProfile();

      return self;
    };

    //region Auxiliary functions
    function initActions() {
      //region Save Profile
      self.elementRef.find('#ego-profile-save').click(function (e) {
        var eForm = $(e.target).closest('form');

        if (!eForm.get(0).checkValidity()) {
          return;
        }

        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();

        var formData = self.getFormData();

        _request({
          url: 'index.php?route=account/account/saveProfile',
          data: {
            transferData: formData
          },
          success: function (response) {
            if (response.success) {
              window.uiService.popup
                .setHeader('Информация')
                .setBody('Профиль успешно обновлен')
                .hideFooter()
                .open();
            } else {
              window.uiService.popup
                .setHeader('Ошибка')
                .setBody(response.message)
                .hideFooter()
                .open();
            }
          }
        });

        return false;
      });
      //endregion
    }

    /**
     * Init balance table
     */
    function initBalance() {
      var idTable = '#order-balance-table';
      var eTable = self.elementRef.find(idTable);

      var dt = eTable.DataTable({
        dom: 'rtp',
        sort: false,
        pagingType: 'numbers',
        autoWidth: false,
        tableTools: {
          sRowSelect: 'multi',
          aButtons: ['select_all', 'select_none']
        },
        language: {
          "url": "/ego/assets/js/egofoxlab/datatables/Russian.json"
        },
      });

      updateBalance(dt);

      //	Init date filter
      self.elementRef.find('.balance-date-from, .balance-date-to')
        .daterangepicker({
          singleDatePicker: true,
          showDropdowns: false,
          minYear: 2010,
          maxYear: new Date().getFullYear(),
          autoUpdateInput: false,
          locale: {
            format: 'DD.MM.YYYY'
          }
        })
        .on('apply.daterangepicker', function (e, picker) {
          $(e.target).val(picker.startDate.format('DD.MM.YYYY'));

          updateBalance(dt, self.elementRef.find('.balance-date-from').val(), self.elementRef.find('.balance-date-to').val());
        });
    }

    /**
     * Update balance table
     *
     * @param {Object} dt - DataTable object
     * @param {string} dateFrom - Date From
     * @param {string} dateTo - Date To
     */
    function updateBalance(dt, dateFrom, dateTo){
      _request({
        url: '/index.php?route=account/account/balanceFrom1c',
        data: {
          transferData: {
            dateFrom: dateFrom,
            dateTo: dateTo
          }
        },
        success: function (response) {
          if (response.code !== 200) {
            console.warn(response.message);

            return;
          }

          dt.clear();
          dt.draw();

          let data = response.data;

          if (empty(data)) {
            data = [];
          }

          data.forEach(function (item) {
            let orderLink = '';

            if (item.Order > 0) {
              orderLink = ' onclick="window.open(\'' + item.url + '\')" ';
            }

            dt.row.add($('\
              <tr\
                class="' + (item.TotalString == true ? 'total-row' : '') + '"\
                ' + orderLink + '\
              >\
                <td>' + item.Document + '</td>\
                <td>\
                  ' + (item.TotalString != true ? item.DocumentSum + ' ' + item.DocumentCurrency : '') + '\
                </td>\
                <td>' + item.Balance + ' ' + item.BalanceCurrency + '</td>\
              </tr>\
              ')[0]).draw();
          });
        }
      });
    }

    /**
     * Init order History table
     */
    function initOrderHistory() {
      $('#orderHistoryTable').DataTable({
        pageLength: 20,
        dom: 'rtp',
        sort: false,
        pagingType: 'numbers',
        aoColumnDefs: [
          {targets: 'nosort', orderable: false}
        ],
        tableTools: {
          sRowSelect: 'multi',
          aButtons: ['select_all', 'select_none']
        },
        language: {
          "url": "/ego/assets/js/egofoxlab/datatables/Russian.json"
        }
      });

      //	Download file with order info
      $('#orderHistoryTable').on('click', '#orderReceiptDownload', function (e) {
        e.preventDefault();
        _request({
          url: 'index.php?route=account/account/downloadOrderInfo',
          data: {
            transferData: {
              orderId: e.currentTarget.dataset.orderId
            }
          },
          success: function (response) {
            if (response.code !== 200) {
              console.warn(response.message);
              return;
            }

            var url = response.data.downloadUrl,
              fileName = response.data.fileName;

            var eDownloadLink = $('\
                <a \
                  href="' + url + '"\
                  download="' + fileName + '"\
                  class="ego-download-order-info"\
                ></a>\
                ');

            $(e.target)
              .parent()
              .append(eDownloadLink);
            eDownloadLink
              .get(0)
              .click();
            eDownloadLink.remove();
          }
        });
      });
    }

    /**
     * Init profile
     */
    function initProfile() {
      //	Phone mask
      var phoneMask = IMask(
        //document.getElementById('phone-mask'),
        self.elementRef.find('[name="ego-form-field-phone-number"]').get(0),
        {
          mask: '{38\\0}000000000',
          lazy: false,  // make placeholder always visible
          placeholderChar: '_'     // defaults to '_'
        }
      );
    }

    //endregion

    return self;
  }

  AccountAccountComponent.prototype = Object.create(BaseComponent.prototype);
  AccountAccountComponent.prototype.constructor = AccountAccountComponent;

  $('[data-toggle=\'tooltip\']').tooltip({container: 'body'});

  var component = new AccountAccountComponent({elementRef: $('#content')});
  component.init();

  $('body').on('change focusin focusout', '.ego-control-input input', function (e) {
    checkLabel($(e.target));
  });

  $('.ego-control-input input').each(function (i, node) {
    checkLabel($(node));
  });

  /**
   * Check showing label
   *
   * @param eInput - Input node
   */
  function checkLabel(eInput) {
    if (eInput.is(':focus')) {
      showLabel(eInput, true);

      return;
    }

    showLabel(eInput, !empty(eInput.val()));

    switch (eInput.attr('type')) {
      case 'number':
        showLabel(eInput, !empty(eInput.val()));
        showLabel(eInput, !empty(eInput.val().length !== 0));

        break;
    }
  }

  /**
   * Show label
   *
   * @param eInput - Input node
   * @param flag - Flag is show label
   */
  function showLabel(eInput, flag) {
    if (flag) {
      eInput.closest('.control-container').find('label').addClass('show');
    } else {
      eInput.closest('.control-container').find('label').removeClass('show');
    }
  }

  const clickTab = () => {
    const activeTab = document.getElementById(`tab-${window.location.hash.slice(1)}`);
    if (activeTab) activeTab.click();
  }

  clickTab();

  window.onhashchange = clickTab;

});
