window.addEventListener('load', () => {
  const novaPoshtaUrl = 'https://api.novaposhta.ua/v2.0/json/';
  const novaPoshtaApi = '36a8941020d957cd92950c83e426ff64';
  const baseUrl = '/index.php?route=checkout/cart/';
  let codAttentionText = '';

  const http = async ({ url, method = 'POST', body }) => {
    try {
      const response = await fetch(url, { method, body: JSON.stringify(body) });

      const contentType = response.headers.get('Content-Type');
      console.log(contentType);

      const responseData = contentType === 'application/json'
          ? await response.json()
          : await response.text();

      if (response.ok) return responseData;
      const error = new Error(`HTTP ${response.status}`);
      error.payload = responseData
      throw error;
    } catch (err) {
      throw err;
    };
  }

  const openPopup = (headerText, bodyText) => {
    uiService.popup
      .setHeader(headerText)
      .setBody(bodyText)
      .hideFooter()
      .open();
  }

  const checkEmail = email => {
    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  };

  const phone = document.getElementById('phone');
  const email = document.getElementById('email');
  const region = document.getElementById('region');
  const city = document.getElementById('city');
  const warehouse = document.getElementById('warehouse');
  const address = document.getElementById('address');

  const getShippingMethod = () => document.querySelector('input[name="shipping-method"]:checked').value;
  const getPaymentMethod = () => document.querySelector('input[name="payment-method"]:checked').value;

  const notQuantityShippingMethod = {};

  const setRegions = async () => {
    const body = {
      apiKey: novaPoshtaApi,
      modelName: 'Address',
      calledMethod: 'getAreas',
      methodProperties: {}
    }

    const response = await http({ url: novaPoshtaUrl, body });
    if (!response || !response.success) return ;

    const appendOption = el => region.append(new Option(el.Description, el.Ref));
    Object.values(response.data).forEach(appendOption);
  }

  let cities = [];

  const setCities = async () => {
    const body = {
      apiKey: novaPoshtaApi,
      modelName: 'Address',
      calledMethod: 'getCities',
      methodProperties: {}
    }

    const response = await http({ url: novaPoshtaUrl, body });
    if (response && response.success) cities = response.data;
  }

  const getWarehouses = async (ref) => {
    const body = {
      apiKey: novaPoshtaApi,
      modelName: 'AddressGeneral',
      calledMethod: 'getWarehouses',
      methodProperties: { CityRef: ref }
    }

    const response = await http({ url: novaPoshtaUrl, body });
    if (response && response.success) return response.data;
    return;
  }

  const initForm = () => {
    phone.value = phone.value.replace(/^38/, '');
    const mask = ['+', '3', '8','(', /\d/, /\d/, /\d/, ')', /\d/, /\d/, /\d/, '-', /\d/, /\d/, '-', /\d/, /\d/];
    vanillaTextMask.maskInput({ inputElement: phone, mask, showMask: true });
    setRegions();
    setCities();
  }

  const onFormDoOrder = async event => {
    event.preventDefault();

    let elemToScroll;
    let bodyText = '';

    const phoneValue = phone.value.replace(/\(|\)|-|\+|_/g, '');
    const isValidPhone = phoneValue.length === 12;
    if (!isValidPhone) {
      bodyText += '<br>Неверный телефон получателя';
      elemToScroll = phone.closest('.form-group');
    }

    const emailValue = email.value.trim();
    const isValidEmail = checkEmail(emailValue);
    if (!isValidEmail) {
      bodyText += '<br>Неверный email';
      if (!elemToScroll) elemToScroll = email.closest('.form-group');
    }

    const shippingMethod = getShippingMethod();

    let shippingAddress = '';

    const regionText = region.options[region.selectedIndex].text;
    const cityText = city.options[city.selectedIndex].text;

    let paymentMethod = '';
    switch (shippingMethod) {
      case 'Новая Почта':
        shippingAddress = `${regionText} - ${cityText} - Склад №${warehouse.value}`;
        paymentMethod = getPaymentMethod();
        break;
      case 'Курьерская доставка "Новая Почта"':
        shippingAddress = `${regionText} - ${cityText} - ${address.value}`;
        paymentMethod = getPaymentMethod();
        break;
      case 'Курьерская доставка г. Ровно': shippingAddress = address.value; break;
    }

    let comment = document.getElementById('comment').value;
    if (document.getElementById('notCallback').checked) comment = `Не перезванивать.\n${comment}`;

    const body = {
      firstName: document.getElementById('firstName').value,
      lastName: document.getElementById('lastName').value,
      phone: phoneValue,
      isValidPhone,
      email: emailValue,
      isValidEmail,
      shippingMethod,
      shippingAddress,
      paymentMethod,
      comment
    };


    showSiteLoader(); // main.js

    try {
      const linkSuccess = await http({ url: `${baseUrl}doOrder`, body });
      if (isValidPhone && isValidEmail) {
        return (window.location = linkSuccess);
      }
    } catch (err) {
      bodyText += `<br>${err.payload || err.message}`;
    }

    hideSiteLoader(); // main.js
    if (elemToScroll) elemToScroll.scrollIntoView({ behavior: 'smooth' });
    openPopup('Ошибка', `Ошибка оформления заказа${bodyText}`);
  };

  const formDoOrder = document.getElementById('formDoOrder');
  formDoOrder.addEventListener('submit', onFormDoOrder);

  const codAttention = async () => {
    if (getShippingMethod() !== 'Новая Почта' || getPaymentMethod() !== 'Наложеный платеж') return codAttentionText = '';
    const response = await http({ url: `${baseUrl}checkEnoughQuantity` });
    if (!response || response.enoughQuantity) return codAttentionText = '';
    if (codAttentionText) return;
    codAttentionText = 'Происходит перемещение Вашего заказа на склад г.Черновцы. Ожидайте отправку через 1 день';
    openPopup('Информация', codAttentionText);
  }

  const onChangeFieldShippingMethod = () => {
    const formRegion = document.getElementById('formRegion');
    const formCity = document.getElementById('formCity');
    const formWarehouse = document.getElementById('formWarehouse');
    const formAddress = document.getElementById('formAddress');

    formRegion.classList.add('hide');
    formCity.classList.add('hide');
    formWarehouse.classList.add('hide');
    formAddress.classList.add('hide');

    region.required = false;
    city.required = false;
    warehouse.required = false;
    address.required = false;

    const wrapperPaymentMethods = document.getElementById('wrapperPaymentMethods');
    const formNonCash = document.getElementById('formNonCash');
    const formCredit = document.getElementById('formCredit');
    const formPrivatBank = document.getElementById('formPrivatBank');
    const formCod = document.getElementById('formCod');

    wrapperPaymentMethods.classList.add('hide');
    formNonCash.classList.add('hide');
    formCredit.classList.add('hide');
    formPrivatBank.classList.add('hide');
    formCod.classList.add('hide');

    const shippingMethod = getShippingMethod();

    if (shippingMethod === 'Новая Почта') {
      formRegion.classList.remove('hide');
      formCity.classList.remove('hide');
      formWarehouse.classList.remove('hide');

      region.required = true;
      city.required = true;
      warehouse.required = true;

      wrapperPaymentMethods.classList.remove('hide');
      formNonCash.classList.remove('hide');
      formCredit.classList.remove('hide');
      formPrivatBank.classList.remove('hide');
      formCod.classList.remove('hide');
    } else if (shippingMethod === 'Курьерская доставка "Новая Почта"') {
      formRegion.classList.remove('hide');
      formCity.classList.remove('hide');
      formAddress.classList.remove('hide');

      region.required = true;
      city.required = true;
      address.required = true;

      wrapperPaymentMethods.classList.remove('hide');
      formNonCash.classList.remove('hide');
      formCredit.classList.remove('hide');
      formPrivatBank.classList.remove('hide');
      formCod.classList.remove('hide');
    } else if (shippingMethod === 'Курьерская доставка г. Ровно') {
      formAddress.classList.remove('hide');
      address.required = true;
    }
  }

  onChangeFieldShippingMethod();

  const onChangePaymentMethod = async () => {
    await codAttention();
    setAttentionMessage();
  };

  const paymentMethodList = document.querySelectorAll('[name="payment-method"]');
  paymentMethodList.forEach(el => el.addEventListener('change', onChangePaymentMethod));

  const onChangeShippingMethod = () => {
    onChangeFieldShippingMethod();
    onChangePaymentMethod();
  };

  const shippingMethodList = document.querySelectorAll('[name="shipping-method"]');
  shippingMethodList.forEach(el => el.addEventListener('change', onChangeShippingMethod));

  const setAttentionMessage = () => {
    const cityList = [];
    if (notQuantityShippingMethod['Самовывоз из г. Ровно']) cityList.push('Ровно');
    if (notQuantityShippingMethod['Самовывоз из г. Черновцы']) cityList.push('Черновцы');

    let message = cityList.length
      ? `Самовывоз из города ${cityList.join(', ')} не доступен из-за недостаточного количества товара на складе`
      : '';

    if (codAttentionText) message = `${message}${message ? '<br>' : ''}${codAttentionText}`;
    const attentionMessage = document.querySelector('.attention-message');
    attentionMessage.innerHTML = message;
  }

  const pickupAttention = async shippingMethodValue => {
    const url = `${baseUrl}checkEnoughQuantityForPickup`;
    const body = { shippingMethod: shippingMethodValue };

    const response = await http({ url, body });
    if (!response) return;

    const selector = `[name="shipping-method"][value="${shippingMethodValue}"]`;
    const shippingMethod = document.querySelector(selector);
    const parentShippingMethod = shippingMethod.parentElement;

    let isHide = true;
    parentShippingMethod.classList.add('hide');

    if (response.enoughQuantity) {
      isHide = false;
      parentShippingMethod.classList.remove('hide');
    } else {
      if (shippingMethod.checked) document.getElementById('novaPoshta').checked = true;
    }

    notQuantityShippingMethod[shippingMethodValue] = isHide;
    setAttentionMessage();
  };

  const checkPickupAttention = () => ['Самовывоз из г. Ровно', 'Самовывоз из г. Черновцы']
    .forEach(pickupAttention);

  const changeProductQuantity = async (cartId, quantity) => {
    const url = `${baseUrl}changeProductQuantity`;
    const body = { cartId, quantity };
    const response = await http({ url, body });
    if (!response) return;

    if (!response.enoughQuantity) return openPopup('Сообщение', 'Слишком большое количество');
    updateCartTotal();
    updateProductsTable();
  }

  const onChangeRegion = ({ target: { value } }) => {
    city.options.length = 1;
    city.selectedIndex = 0
    warehouse.options.length = 1;
    warehouse.selectedIndex = 0

    if (!value) return;
    const appendOption = el => el.Area === value && city.append(new Option(el.Description, el.Ref));
    Object.values(cities).forEach(appendOption);
  }

  region.addEventListener('change', onChangeRegion);

  const onChangeCity = async ({ target: { value } }) => {
    warehouse.options.length = 1;
    warehouse.selectedIndex = 0

    if (!value) return;
    const appendOption = el => warehouse.append(new Option(el.Description, el.Number));
    const warehouses = await getWarehouses(value);
    Object.values(warehouses).forEach(appendOption);
  }

  city.addEventListener('change', onChangeCity);

  const updateCartTotal = async () => {
    const response = await http({ url: 'index.php?route=common/cart/info' });
    if (!response) return;
    document.getElementById('cart').innerHTML = response;
  }

  const onFocusPhone = ({ target }) => {
    const index = target.value.indexOf('_');
    if (index !== -1) target.setSelectionRange(index, index);
  }

  phone.addEventListener('focus', onFocusPhone);
  phone.addEventListener('click', onFocusPhone);

  initForm();

  // ---------------------------------------------------------------

  var baseComponent = new BaseComponent({elementRef: $('#checkout-checkout')});

  updateProductsTable();

  /**
   * Reduce product quantity
   */
  baseComponent.elementRef.on('click', '#products-table .quantity .reduce', function (e) {
    var target = $(e.target);
    var eTr = target.closest('tr');
    var eInput = eTr.find('.quantity input');
    var cartId = parseInt(eTr.attr('data-cart-id'));
    var quantity = parseInt(eInput.val()) - 1;
    quantity = quantity < 1 ? 1 : quantity;

    changeProductQuantity(cartId, quantity);
  });

  /**
   * Increase product quantity
   */
  baseComponent.elementRef.on('click', '#products-table .quantity .increase', function (e) {
    var target = $(e.target);
    var eTr = target.closest('tr');
    var eInput = eTr.find('.quantity input');
    var cartId = parseInt(eTr.attr('data-cart-id'));
    var quantity = parseInt(eInput.val()) + 1;

    changeProductQuantity(cartId, quantity);
  });

  /**
   * Delete product item from cart
   */
  baseComponent.elementRef.on('click', '#products-table .delete-item', function (e) {
    var target = $(e.target);
    var eTr = target.closest('tr');
    var cartId = parseInt(eTr.attr('data-cart-id'));
    removeItem(cartId);
  });

  function updateProductsTable() {
    getProducts(function (data) {
      var productList = data.products;
      var total = data.total;
      var eTbody = baseComponent.elementRef.find('#products-table tbody');

      eTbody.empty();

      for (var key in productList) {
        if (!productList.hasOwnProperty(key)) continue;

        var product = productList[key];
        var row = '\
              <tr \
                data-product-id="' + product.product_id + '"\
                data-cart-id="' + product.cart_id + '"\
              >\
                <td>\
                  <a href="' + product.href + '">\
                    <img \
                      src="/image/' + product.image + '"\
                      width="36px"\
                      >\
                  </a>\
                </td>\
                <td>\
                  <a href="' + product.href + '">\
                    ' + product.name + '\
                  </a>\
                </td>\
                <td class="quantity">\
                  <div>\
                    <input\
                      type="text"\
                      value="' + product.quantity + '"\
                      readonly\
                      >\
                    <button\
                      type="button"\
                      class="btn btn-danger reduce"\
                    >\
                      -\
                    </button>\
                    <button\
                        type="button"\
                        class="btn btn-success increase"\
                    >\
                      +\
                    </button>\
                  </div>\
                </td>\
                <td>\
                  ' + product.price + '\
                </td>\
                <td>\
                  ' + product.total + '\
                </td>\
                <td>\
                  <span class="delete-item">\
                    <i class="fa fa-trash-o" aria-hidden="true"></i>\
                  </span>\
                </td>\
              </tr>\
              ';

        eTbody.append($(row));
      }

      const rowTotal = `
        <tr class="total">
          <td colspan="5">Итого: ${total}</td>
        </tr>
      `;

      eTbody.append($(rowTotal));
    });

    checkPickupAttention();
    codAttention();
  }

  function getProducts(callback) {
    _request({
      url: '/index.php?route=checkout/cart/getCartProducts',
      success: function (response) {
        if (response.success) {
          currency = response.data.currency;
          callback(response.data);
        }
      }
    });
  }

  function removeItem(cartId) {
    _request({
      url: '/index.php?route=checkout/cart/removeItem',
      data: {
        transferData: {
          cartId: cartId
        }
      },
      success: function (response) {
        if (response.success) updateProductsTable();
      }
    })
  }
});


