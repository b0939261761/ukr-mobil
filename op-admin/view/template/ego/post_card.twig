{{ header }}
{{ column_left }}

<div id="content">
	<div class="page-header">
		<div class="container-fluid">
			<div class="pull-right">
				<a
						href="javascript:void(0);"
						id="ego-save"
						class="btn btn-primary"
						data-toggle="tooltip"
						title="Save"
				>
					<i class="fa fa-save"></i>
				</a>
			</div>
			<h1>Posts</h1>
			<ul class="breadcrumb">
				{% for breadcrumb in breadcrumbs %}
					<li>
						<a href="{{ breadcrumb.href }}">{{ breadcrumb.text }}</a>
					</li>
				{% endfor %}
			</ul>
		</div>
	</div>
	<div class="container-fluid">
		<div class="panel panel-default">
			<div class="panel-body">
				<form class="form-horizontal">
					{#Top tabls#}
					<ul class="nav nav-tabs">
						<li class="active">
							<a href="#tab-general"
							   data-toggle="tab">
								General
							</a>
						</li>
					</ul>
					<div class="tab-content">
						<div
								class="tab-pane active"
								id="tab-general"
						>

							{#Category#}
							<div class="form-group">
								<label
										class="col-sm-2 control-label"
										for="ego-form-field-category"
								>
									Category
								</label>
								<div class="col-sm-10">
									<input
											type="text"
											name="ego-form-field-category"
											id="ego-form-field-category"
											class="form-control"
											value="{{ card.post.category }}"
									>
								</div>
							</div>

							{#Image#}
							<div class="form-group">
								<label
										class="col-sm-2 control-label"
								>
									Image
								</label>
								<div class="col-sm-10">
									<a
											href=""
											id="thumb-preview-image"
											data-toggle="image"
											data-original-title=""
									>
										<img
												src="{% if card.post.preview_image is empty %}{{ thumb }}{% else %}{{ card.post.preview_image_thumb }}{% endif %}"
												data-placeholder="{{ thumb }}"
										>
									</a>
									<input
											type="hidden"
											id="input-preview-image"
											name="ego-form-field-preview-image"
											value="{{ card.post.preview_image }}"
									>
								</div>
							</div>

							{#Language tabs#}
							<ul
									id="language"
									class="nav nav-tabs"
							>
								{% for language in languages %}
									<li>
										<a
												href="#language{{ language.language_id }}"
												data-toggle="tab"
										>
											<img src="language/{{ language.code }}/{{ language.code }}.png"
												 title="{{ language.name }}"
											/>
											{{ language.name }}
										</a>
									</li>
								{% endfor %}
							</ul>
						</div>
					</div>
					<div class="tab-content">
						{% for language in languages %}
							<div
									id="language{{ language.language_id }}"
									class="tab-pane"
							>
								{#Title#}
								<div class="form-group required">
									<label
											class="col-sm-2 control-label"
											for="ego-form-field-title-{{ language.language_id }}"
									>
										Title
									</label>
									<div class="col-sm-10">
										<input
												type="text"
												name="ego-form-field-title"
												id="ego-form-field-title-{{ language.language_id }}"
												class="form-control"
												value="{{ card.content[language.language_id] ? card.content[language.language_id].title }}"
												data-language="{{ language.language_id }}"
												required
										>
									</div>
								</div>

								{#Content#}
								<div class="form-group required">
									<label
											class="col-sm-2 control-label"
											for="ego-form-field-content-{{ language.language_id }}"
									>
										Content
									</label>
									<div class="col-sm-10">
										<textarea
												name="ego-form-field-content"
												id="ego-form-field-content-{{ language.language_id }}"
												class="form-control"
												placeholder="Entry description"
												data-toggle="summernote"
												data-language="{{ language.language_id }}"
												required
										>{{ card.content[language.language_id] ? card.content[language.language_id].content }}</textarea>
									</div>
								</div>
							</div>
						{% endfor %}
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<div>
	<textarea
			id="ego-languages"
			class="hide"
	>{{ languages|json_encode() }}</textarea>
</div>

<script src="view/javascript/summernote/summernote.js"></script>
<link rel="stylesheet" href="view/javascript/summernote/summernote.css"/>
<script src="view/javascript/summernote/summernote-image-attributes.js"></script>
<script src="view/javascript/summernote/opencart.js"></script>

<script>
  function empty(mixed_var) {
    var result = true;

    try {
      if (mixed_var === ""
        || mixed_var === 0
        || mixed_var === "0"
        || mixed_var === null
        || mixed_var === false
        || (mixed_var instanceof Array && mixed_var.length === 0)
        || typeof mixed_var === 'undefined'
      ) {
        result = true;
      } else {
        result = false;
      }
    } catch (e) {
      console.log(e);
      result = true;
    }
    return result;
  }

	$(function () {
    function _request(params) {
      var $ = jQuery;

      var defaults = {
        url: params.url,
        timeout: 10000,
        method: params.method ? params.method : 'post',
        data: params.data ? params.data : null,
        dataType: params.type ? params.type : "json",
        success: function (response) {
          if (!response.success && params.type === 'json') {
            if (response.error) {
              alert(response.error);
            }

            if (typeof params.notSuccess === 'function') {
              params.notSuccess.call(this, response);
            }

            return;
          }

          if (typeof params.success === 'function') {
            params.success.call(this, response);
          }
          else if (typeof params.success === 'object') {
            alert(params.success.text);
          }
        },
        error: function (XHR, textStatus, errorThrown) {
          console.log(['Error:', textStatus, errorThrown, params]);

          if (typeof params.error === 'function') {
            params.error.call(this, XHR, textStatus, errorThrown);
          }

          $(document).trigger('_request.error');
        }
      };

      $.ajax(defaults);
    }

    function isRequiredFieldsEmpty(formData) {
      for (var key in formData) {
        if (!formData.hasOwnProperty(key)) {
          continue;
        }

        var field = formData[key];

        if (field.required && (empty(field.value) && field.value !== 0)) {
          return true;
        }
      }

      return false;
    }

    function collectFormData(selector, container, options) {
      var $ = jQuery;
      options = empty(options) ? {} : options;

      if (empty(container)) {
        container = $('body');
      } else {
        container = $(container);
      }

      var result = {};

      container.find(selector).each(function (i, node) {
        node = $(node);

        var eLabel = container.find('label[for="' + node.attr('id') + '"]');
        var name = node.attr('name'),
          value = node.val(),
          disabled = node.prop('disabled'),
          description = eLabel.text();

        if (empty(eLabel.get(0)) && !empty(node.attr('data-description'))) {
          description = node.attr('data-description');
        }

        switch(node.attr('type')) {
          case 'checkbox':
            value = node.prop('checked');

            break;

          case 'radio':
            value = container.find('input:radio[name="' + name + '"]:checked').val();

            break;
        }

        switch (node.prop('tagName').toLowerCase()) {
          case 'select':
            if (node.prop('multiple')) {

            } else {
              value = [node.val()];
            }

            break;
        }

        if (empty(value)) {
          var defaultValue = node.attr('data-default-value');

          if (typeof defaultValue !== 'undefined') {
            value = defaultValue;
          }
        }

        if (!empty(name)) {
          var required = node.data('required') === true;

          if (node.attr('required') === 'required') {
            required = true;
          }

          if (!empty(options.cutName)) {
            name = name.replace(options.cutName, '');
          }

          result[name] = {
            value: value,
            required: required,
            disabled: disabled,
            description: description
          }
        }
      });

      return result;
    }

		var cardId = parseInt('{{ card.post.id }}');
		var urlSave = '{{ save }}';
		var baseComponent = new BaseComponent({elementRef: $('#content')});
		var languages = JSON.parse($('#ego-languages').val());

		//region Init
		$('#language a:first').tab('show');
		//endregion

		//region Save
		baseComponent.elementRef.find('#ego-save').click(function () {
			var formData = {
				post: {
					id: cardId,
					category: baseComponent.elementRef.find('[name="ego-form-field-category"]').val(),
					preview_image: baseComponent.elementRef.find('[name="ego-form-field-preview-image"]').val()
				},
				content: {}
			};

			for (var languageKey in languages) {
				if (!languages.hasOwnProperty(languageKey)) {
					continue;
				}

				var languageItem = languages[languageKey];
				formData.content[languageItem.language_id] = collectFormData(
					'[name^="' + baseComponent.fieldPrefix + '"][data-language="' + languageItem.language_id + '"]',
					baseComponent.elementRef,
					{
						cutName: baseComponent.fieldPrefix
					}
				);

				if (isRequiredFieldsEmpty(formData.content[languageItem.language_id])) {
					(new EgoProximaPopup())
						.setHeader('Warning')
						.setBody('Fill required fields.')
						.hideFooter()
						.open();

					return;
				}
			}

			console.log(formData);

			_request({
				url: urlSave,
				data: {
					transferData: formData
				},
				success: function (response) {
					if (response.success) {
						if (!(cardId > 0)) {
							cardId = response.data.cardId;
						}

						(new EgoProximaPopup())
							.setHeader('Info')
							.setBody('Successfully save card.')
							.hideFooter()
							.open();
					} else {
						(new EgoProximaPopup())
							.setHeader('Error')
							.setBody(response.message)
							.hideFooter()
							.open();
					}
				}
			})
		});
		//endregion
	});
</script>

{{ footer }}
