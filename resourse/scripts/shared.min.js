window.shared = {};

window.shared.throttle = (callback, wait, immediate = false) => {
  let timeout = null;
  let initialCall = true;

  return (...args) => {
    const callNow = immediate && initialCall;

    const run = () => {
      callback(...args);
      timeout = null;
    };

    if (callNow) {
      initialCall = false;
      run();
    }

    if (!timeout) timeout = setTimeout(run, wait);
  };
};

window.shared.debounce = (callback, wait, immediate = false) => {
  let timeout = null;

  return (...args) => {
    const callNow = immediate && !timeout;
    const run = () => callback(...args);

    clearTimeout(timeout);
    timeout = setTimeout(run, wait);

    if (callNow) run();
  };
};

window.shared.escapeRegExp = str => str.replace(/[\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');

window.shared.checkEmail = email => {
  const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
};

const headerBanner = document.getElementById('headerBanner');

if (headerBanner) {
  const onResizeHeaderBanner = () => {
    const { height } = headerBanner.getBoundingClientRect();
    document.body.style.setProperty('--header-banner-top', `${height}px`);
  };
  const onResizeHeaderBannerThrottle = window.shared.throttle(onResizeHeaderBanner, 1000);
  onResizeHeaderBannerThrottle();

  window.addEventListener('resize', onResizeHeaderBannerThrottle);
}

const onSubmitHeaderSearch = evt => {
  evt.preventDefault();
  const search = evt.target.search.value.trim();
  if (!search) return;
  window.location = `/index.php?route=search&search=${search}`;
};

const headerSearch = document.getElementById('headerSearch');
headerSearch.addEventListener('submit', onSubmitHeaderSearch);

headerSearch.addEventListener('focusin', () => document.body.classList.add('body--header-search-focus'));
headerSearch.addEventListener('focusout', () => document.body.classList.remove('body--header-search-focus'));

// ============================================================================

const headerSearchInputInput = headerSearch.querySelector('.header-search__input-input');

const headerSearchCatalogs = headerSearch.querySelector('.header-search__catalogs');
const headerSearchProducts = headerSearch.querySelector('.header-search__products');

const headerSearchWrapperDrop = headerSearch.querySelector('.header-search__wrapper-drop');
const headerSearchDrop = headerSearch.querySelector('.header-search__drop');

const onResizeHeaderSearchWrapperDrop = () => {
  headerSearchWrapperDrop.style.setProperty('--height', `${headerSearchDrop.scrollHeight}px`);
};
const onResizeHDWrapperDropThrottle = window.shared.throttle(onResizeHeaderSearchWrapperDrop, 16);

// ============================================================================

const headerSearchClose = () => {
  document.body.classList.remove('body--header-search-open');
  window.removeEventListener('resize', onResizeHDWrapperDropThrottle);
};

const headerSearcBackdrop = headerSearch.querySelector('.header-search__backdrop');
headerSearcBackdrop.addEventListener('click', headerSearchClose);

// ============================================================================

const getHeaderSearchCatalogsItem = (search, catalog) => {
  const main = document.createElement('li');

  const item = document.createElement('a');
  item.href = catalog.categoryUrl;
  item.classList.add('header-search__catalogs-item');
  main.appendChild(item);

  const itemSearch = document.createElement('div');
  itemSearch.classList.add('header-search__catalogs-item-search');
  item.appendChild(itemSearch);

  const xmlns = 'http://www.w3.org/2000/svg';
  const xlink = 'http://www.w3.org/1999/xlink';
  const itemSearchImg = document.createElementNS(xmlns, 'svg');
  itemSearchImg.classList.add('header-search__catalogs-item-search-img');
  itemSearch.appendChild(itemSearchImg);

  const itemSearchImgUse = document.createElementNS(xmlns, 'use');
  itemSearchImgUse.setAttributeNS(xlink, 'href', '/resourse/images/shared-sprite-icons.svg#icon-search');
  itemSearchImg.appendChild(itemSearchImgUse);

  itemSearch.appendChild(document.createTextNode(search));

  const itemImgArrow = document.createElementNS(xmlns, 'svg');
  itemImgArrow.classList.add('header-search__catalogs-item-img-arrow');
  item.appendChild(itemImgArrow);

  const itemImgArrowUse = document.createElementNS(xmlns, 'use');
  itemImgArrowUse.setAttributeNS(xlink, 'href', '/resourse/images/shared-sprite-icons.svg#icon-arrow-right');
  itemImgArrow.appendChild(itemImgArrowUse);

  const itemTitle = document.createElement('span');
  itemTitle.classList.add('header-search__catalogs-item-title');
  itemTitle.textContent = 'В категорії';
  item.appendChild(itemTitle);

  const itemValue = document.createElement('span');
  itemValue.classList.add('header-search__catalogs-item-value');
  itemValue.textContent = catalog.categoryName;
  item.appendChild(itemValue);

  item.appendChild(itemImgArrow.cloneNode(true));

  const itemValue0 = document.createElement('span');
  itemValue0.classList.add('header-search__catalogs-item-value', 'header-search__catalogs-item-value--0');
  itemValue0.textContent = catalog.categoryName0;
  item.appendChild(itemValue0);

  return main;
};

// ============================================================================

const getHeaderSearchProductsItem = product => {
  const item = document.createElement('li');
  item.classList.add('header-search__products-item');

  const itemLink = document.createElement('a');
  itemLink.href = product.productUrl;
  itemLink.classList.add('header-search__products-item-link');
  item.appendChild(itemLink);

  const itemImg = document.createElement('img');
  itemImg.classList.add('header-search__products-item-link-img');
  itemImg.src = product.image;
  itemLink.appendChild(itemImg);

  const itemName = document.createElement('div');
  itemName.classList.add('header-search__products-item-link-name');
  itemName.textContent = product.productName;
  itemLink.appendChild(itemName);

  const itemPrice = document.createElement('div');
  itemPrice.classList.add('header-search__products-item-link-price');
  itemLink.appendChild(itemPrice);

  if (product.isPromotions) {
    const itemPriceOld = document.createElement('div');
    itemPriceOld.classList.add('header-search__products-item-link-price-old');
    itemPriceOld.textContent = `${product.priceOldUAH} грн`;
    itemPrice.appendChild(itemPriceOld);
  }

  const itemPriceCurrent = document.createElement('div');
  itemPriceCurrent.classList.add('header-search__products-item-link-price-current');
  itemPrice.appendChild(itemPriceCurrent);

  const itemPriceUAH = document.createElement('div');
  itemPriceUAH.classList.add('header-search__products-item-link-price-uah');
  itemPriceUAH.textContent = `${product.priceUAH} грн`;
  itemPriceCurrent.appendChild(itemPriceUAH);

  itemPriceCurrent.appendChild(document.createTextNode(`$ ${product.priceUSD}`));
  return item;
};

// ============================================================================

const onHeaderSearchOpen = async ({ target }) => {
  let data = [];
  target.value = target.value.replace(/\\/g, '');
  const search = target.value.trim();

  if (search.length > 1) {
    const url = '/index.php?route=shared/header_search/search';
    const body = JSON.stringify({ search });

    try {
      const response = await fetch(url, { method: 'POST', body });
      if (response.ok) {
        data = await response.json();
      } else {
        throw new Error(`${response.status} ${response.statusText}`);
      }
    } catch (err) {
      console.error(err);
    }
  }

  headerSearchCatalogs.innerHTML = '';
  headerSearchProducts.innerHTML = '';

  if (data.length) {
    const headerSearchDropInsert = el => {
      headerSearchCatalogs.appendChild(getHeaderSearchCatalogsItem(search, el));
      headerSearchProducts.appendChild(getHeaderSearchProductsItem(el));
    };

    setTimeout(() => {
      onResizeHeaderSearchWrapperDrop();
      document.body.classList.add('body--header-search-open');
    }, 1);

    data.forEach(headerSearchDropInsert);
    window.addEventListener('resize', onResizeHDWrapperDropThrottle);
  } else {
    headerSearchClose();
  }
};

const onHeaderSearchOpenDebounce = window.shared.debounce(onHeaderSearchOpen, 500);

headerSearchInputInput.addEventListener('input', onHeaderSearchOpenDebounce);
headerSearchInputInput.addEventListener('focus', onHeaderSearchOpen);

const headerLogin = document.getElementById('headerLogin');
if (headerLogin) headerLogin.addEventListener('click', () => window.modalWindowLogin());

// ==============================================

const headerFavorites = document.getElementById('headerFavorites');
if (headerFavorites) headerFavorites.addEventListener('click', () => window.modalWindowLogin());

// ==============================================

const headerCart = document.getElementById('headerCart');
if (headerCart) headerCart.addEventListener('click', () => window.cartOpen());

const onResizeHeader = () => {
  const { bottom } = document.getElementById('header').getBoundingClientRect();
  document.body.style.setProperty('--header-bottom', `${bottom}px`);
};

onResizeHeader();

const onResizeHeaderThrottle = window.shared.throttle(onResizeHeader, 100);
window.addEventListener('resize', onResizeHeaderThrottle);
window.addEventListener('scroll', onResizeHeaderThrottle);

const footerWindowModalFeedbackError = document.getElementById('footerWindowModalFeedbackError');
footerWindowModalFeedbackError.addEventListener('click', () => window.modalWindowFeedbackError());

const footerWindowModalFeedbackManager = document.getElementById('footerWindowModalFeedbackManager');
footerWindowModalFeedbackManager.addEventListener('click', () => window.modalWindowFeedbackManager());

const siteLoaderEl = document.getElementById('siteLoader');

window.showSiteLoader = () => {
  siteLoaderEl.classList.remove('hide');
  document.body.classList.add('body-site-loader');
};

window.hideSiteLoader = () => {
  siteLoaderEl.classList.add('hide');
  document.body.classList.remove('body-site-loader');
};

const btnScrollToTopEl = document.getElementById('btnScrollToTop');
const onClickbtnScrollToTop = () => window.scrollTo({ left: 0, top: 0, behavior: 'smooth' });
btnScrollToTopEl.addEventListener('click', onClickbtnScrollToTop);

const onHide = entries => {
  entries.forEach(({ isIntersecting }) => {
    isIntersecting
      ? btnScrollToTopEl.classList.add('footer-btn-scroll-to-top--hidden')
      : btnScrollToTopEl.classList.remove('footer-btn-scroll-to-top--hidden');
  });
};

const interseptorHideFooterBtnScrollToTop = document.createElement('div');
interseptorHideFooterBtnScrollToTop.classList.add('interseptor-hide-footer-btn-scroll-to-top');
document.body.appendChild(interseptorHideFooterBtnScrollToTop);

(new IntersectionObserver(onHide)).observe(interseptorHideFooterBtnScrollToTop);

const onDock = entries => {
  entries.forEach(({ isIntersecting }) => {
    isIntersecting
      ? btnScrollToTopEl.classList.remove('footer-btn-scroll-to-top--float')
      : btnScrollToTopEl.classList.add('footer-btn-scroll-to-top--float');
  });
};

(new IntersectionObserver(onDock))
  .observe(document.getElementById('interseptorDockFooterBtnScrollToTop'));

const navCategoriesListActivate = row => {
  if (!window.matchMedia('(min-width: 1080px)').matches) return;
  const navCategoriesList = row.querySelector('.nav-catalog__list');
  if (navCategoriesList) navCategoriesList.classList.add('nav-catalog__list--is-visible');
};

const deactivateCategoriesListActivate = row => {
  if (!window.matchMedia('(min-width: 1080px)').matches) return;
  const navCategoriesList = row.querySelector('.nav-catalog__list');
  if (navCategoriesList) navCategoriesList.classList.remove('nav-catalog__list--is-visible');
};

$('.nav-catalog__list').menuAim({
  activate: navCategoriesListActivate,
  deactivate: deactivateCategoriesListActivate,
  exitMenu: () => true
});

const navCategoriesBtnNavList = document.querySelectorAll('.nav-catalog__link--has-children');
const onClickNavCategoriesBtnNav = evt => {
  if (window.matchMedia('(min-width: 1080px)').matches) return;
  evt.preventDefault();
  const navCategoriesList = evt.target.parentElement.querySelector('.nav-catalog__list');
  if (navCategoriesList) navCategoriesList.classList.add('nav-catalog__list--is-visible');
};
navCategoriesBtnNavList.forEach(el => el.addEventListener('click', onClickNavCategoriesBtnNav));

const mobileMenu = document.getElementById('mobileMenu');
const btnMobileMenu = document.getElementById('btnMobileMenu');

const onClickBtnMobileMenu = () => {
  if (document.body.classList.contains('body--mobile-menu-open')) {
    document.body.classList.remove('body--mobile-menu-catalog-open');
    const navCategoriesList = document.querySelectorAll('.nav-catalog__list--is-visible');
    navCategoriesList.forEach(el => el.classList.remove('nav-catalog__list--is-visible'));
  }

  document.body.classList.toggle('body--mobile-menu-open');
};

btnMobileMenu.addEventListener('click', onClickBtnMobileMenu);

// ------------------------------------------------------------------

const btnHeaderMenuEl = document.getElementById('btnHeaderMenu');

const onClickBtnHeaderMenu = evt => {
  if (evt.target !== evt.currentTarget) return;
  document.body.classList.toggle('body--mobile-menu-open');
};

btnHeaderMenuEl.addEventListener('click', onClickBtnHeaderMenu);
mobileMenu.addEventListener('click', onClickBtnHeaderMenu);

// ------------------------------------------------------------------

const btnMobileMenuCategories = document.getElementById('btnMobileMenuCategories');

const onClickBtnMobileMenuCategories = () => {
  if (document.body.classList.contains('body--mobile-menu-catalog-open')) {
    const navCategoriesList = document.querySelectorAll('.nav-catalog__list--is-visible');
    if (!navCategoriesList.length) {
      document.body.classList.remove('body--mobile-menu-catalog-open');
      return;
    }
    const navCategoriesListLast = navCategoriesList[navCategoriesList.length - 1];
    navCategoriesListLast.classList.remove('nav-catalog__list--is-visible');
  } else {
    document.body.classList.add('body--mobile-menu-catalog-open');
  }
};

btnMobileMenuCategories.addEventListener('click', onClickBtnMobileMenuCategories);

// ------------------------------------------------------------------

const mmWindowModalFeedbackError = document.getElementById('mmWindowModalFeedbackError');
mmWindowModalFeedbackError.addEventListener('click', () => window.modalWindowFeedbackError());

const mmWindowModalFeedbackManager = document.getElementById('mmWindowModalFeedbackManager');
mmWindowModalFeedbackManager.addEventListener('click', () => window.modalWindowFeedbackManager());

// ------------------------------------------------------------------

const wrapperMobileMenuContacts = document.getElementById('wrapperMobileMenuContacts');

const setMobileMenuContactsHeight = height => wrapperMobileMenuContacts.style.setProperty('--height', height);

const onResizeMobileMenuContacts = () => setMobileMenuContactsHeight(`${wrapperMobileMenuContacts.firstElementChild.scrollHeight}px`);
const onResizeMobileMenuContactsThrottle = window.shared.throttle(onResizeMobileMenuContacts, 500);

const onClickMobileMenuBtnContact = () => {
  if (wrapperMobileMenuContacts.style.getPropertyValue('--height')) {
    setMobileMenuContactsHeight(null);
    window.removeEventListener('resize', onResizeMobileMenuContactsThrottle);
  } else {
    onResizeMobileMenuContacts();
    window.addEventListener('resize', onResizeMobileMenuContactsThrottle);
  }
};

const mobileMenuBtnContact = document.getElementById('mobileMenuBtnContact');
mobileMenuBtnContact.addEventListener('click', onClickMobileMenuBtnContact);

// ============================================================================

const mobileMenuLogin = document.getElementById('mobileMenuLogin');
if (mobileMenuLogin) mobileMenuLogin.addEventListener('click', () => window.modalWindowLogin());

// ============================================================================

const mobileMenuFavorites = document.getElementById('mobileMenuFavorites');
if (mobileMenuFavorites) mobileMenuFavorites.addEventListener('click', () => window.modalWindowLogin());

window.ModalWindow = class {
  constructor(titleText, bodyInner) {
    this.createModal(titleText, bodyInner);
    document.body.classList.add('body--window-modal-open');
    setTimeout(() => this.modalWindow.classList.add('modal-window--open'), 10);
  }

  static createResponse(text, type) {
    const response = document.createElement('div');
    response.classList.add('modal-window__response', `modal-window__response--${type}`);
    response.innerHTML = text;
    return response;
  }

  static createFormElement() {
    const form = document.createElement('form');
    form.classList.add('modal-window__form');
    return form;
  }

  // static createFormCheckBox({
  //   title, name, required
  // }) {
  //   const formInput = document.createElement('label');
  //   formInput.classList.add('form-ckeckbox');

  //   const inputNameInput = document.createElement('input');
  //   inputNameInput.classList.add('form-ckeckbox__input');
  //   inputNameInput.type = 'checkbox';
  //   inputNameInput.name = name;
  //   if (required) inputNameInput.required = true;
  //   formInput.appendChild(inputNameInput);

  //   const xmlns = 'http://www.w3.org/2000/svg';
  //   const xlink = 'http://www.w3.org/1999/xlink';
  //   const checkImg = document.createElementNS(xmlns, 'svg');
  //   checkImg.classList.add('form-ckeckbox__check-img');
  //   formInput.appendChild(checkImg);

  //   const checkImgUse = document.createElementNS(xmlns, 'use');
  //   checkImgUse.setAttributeNS(xlink, 'href', '/resourse/images/shared-sprite-icons.svg#icon-check');
  //   checkImg.appendChild(checkImgUse);

  //   const formInputTitle = document.createElement('span');
  //   formInputTitle.classList.add('form-input__title1');
  //   formInput.appendChild(formInputTitle);
  //   formInputTitle.appendChild(document.createTextNode(title));
  //   return formInput;
  // }

  static createFormInput({
    title, name, placeholder, required, type, element = 'input', maxLength
  }) {
    const formInput = document.createElement('label');
    formInput.classList.add('form-input');

    const formInputTitle = document.createElement('div');
    formInputTitle.classList.add('form-input__title');
    formInput.appendChild(formInputTitle);

    formInputTitle.appendChild(document.createTextNode(title));

    if (required) {
      const inputNameTitleRequired = document.createElement('span');
      inputNameTitleRequired.classList.add('form-input__title-required');
      inputNameTitleRequired.textContent = '*';
      formInputTitle.appendChild(inputNameTitleRequired);
    }

    const inputNameInput = document.createElement(element);
    inputNameInput.classList.add(`form-input__${element}`);
    inputNameInput.name = name;
    if (placeholder) inputNameInput.placeholder = placeholder;
    if (required) inputNameInput.required = true;
    if (maxLength) inputNameInput.maxLength = maxLength;
    if (type) inputNameInput.type = type;
    formInput.appendChild(inputNameInput);

    return formInput;
  }

  static createFormInputPhone({
    title, name, required, value
  }) {
    const formInput = document.createElement('label');
    formInput.classList.add('form-input');

    const formInputTitle = document.createElement('div');
    formInputTitle.classList.add('form-input__title');
    formInput.appendChild(formInputTitle);

    formInputTitle.appendChild(document.createTextNode(title));

    if (required) {
      const inputNameTitleRequired = document.createElement('span');
      inputNameTitleRequired.classList.add('form-input__title-required');
      inputNameTitleRequired.textContent = '*';
      formInputTitle.appendChild(inputNameTitleRequired);
    }

    const inputNameInput = document.createElement('input');
    inputNameInput.classList.add('form-input__input');
    inputNameInput.name = name;
    inputNameInput.pattern = '\\+38\\(0\\d{2}\\)\\d{3}-\\d{2}-\\d{2}';
    if (required) inputNameInput.required = true;
    formInput.appendChild(inputNameInput);

    const mask = IMask(inputNameInput, { mask: '+38(\\000)000-00-00', lazy: false });
    const invalidText = 'Неправильний номер телефону. Формат 38(0xx)xxx-xx-xx';

    if (value) mask.unmaskedValue = value;

    inputNameInput.addEventListener('invalid', () => inputNameInput.setCustomValidity(invalidText));
    inputNameInput.addEventListener('input', () => inputNameInput.setCustomValidity(''));

    return { element: formInput, mask };
  }

  static createFormInputPassword({
    title, name, required, confirmElement, isConfirm = false, minLength, maxLength
  }) {
    const formInput = document.createElement('label');
    formInput.classList.add('form-input');

    const formInputTitle = document.createElement('div');
    formInputTitle.classList.add('form-input__title');
    formInput.appendChild(formInputTitle);

    formInputTitle.appendChild(document.createTextNode(title));

    if (required) {
      const inputNameTitleRequired = document.createElement('span');
      inputNameTitleRequired.classList.add('form-input__title-required');
      inputNameTitleRequired.textContent = '*';
      formInputTitle.appendChild(inputNameTitleRequired);
    }

    const inputWrapperInput = document.createElement('div');
    inputWrapperInput.classList.add('form-input__wrapper-input-password');
    formInput.appendChild(inputWrapperInput);

    const inputNameInput = document.createElement('input');
    inputNameInput.classList.add('form-input__input', 'form-input__input--password');
    inputNameInput.name = name;
    if (required) inputNameInput.required = true;
    if (minLength) inputNameInput.minLength = minLength;
    if (maxLength) inputNameInput.maxLength = maxLength;
    inputNameInput.type = 'password';
    inputWrapperInput.appendChild(inputNameInput);

    const onInput = ({ target }) => {
      if (confirmElement) {
        confirmElement.pattern = window.shared.escapeRegExp(target.value);
      }
      inputNameInput.setCustomValidity('');
    };

    const onInvalid = () => {
      if (isConfirm) inputNameInput.setCustomValidity('Паролі неспівпадають');
    };

    inputNameInput.addEventListener('input', onInput);
    inputNameInput.addEventListener('invalid', onInvalid);

    const btnVisible = document.createElement('button');
    btnVisible.classList.add('form-input__btn-visible-password');
    btnVisible.type = 'button';
    inputWrapperInput.appendChild(btnVisible);

    const onClickBtnVisible = () => {
      if (btnVisible.classList.contains('form-input__btn-visible-password--active')) {
        btnVisible.classList.remove('form-input__btn-visible-password--active');
        inputNameInput.type = 'password';
      } else {
        btnVisible.classList.add('form-input__btn-visible-password--active');
        inputNameInput.type = 'text';
      }
    };
    btnVisible.addEventListener('click', onClickBtnVisible);

    const xmlns = 'http://www.w3.org/2000/svg';
    const xlink = 'http://www.w3.org/1999/xlink';
    const btnVisiblePasswordImg = document.createElementNS(xmlns, 'svg');
    btnVisiblePasswordImg.classList.add('form-input__btn-visible-password-img');
    btnVisible.appendChild(btnVisiblePasswordImg);

    const btnVisiblePasswordImgUse = document.createElementNS(xmlns, 'use');
    btnVisiblePasswordImgUse.setAttributeNS(xlink, 'href', '/resourse/images/shared-sprite-icons.svg#icon-eye');
    btnVisiblePasswordImg.appendChild(btnVisiblePasswordImgUse);

    const line = document.createElement('span');
    line.classList.add('form-input__btn-visible-password-line');
    btnVisible.appendChild(line);

    return formInput;
  }

  static createFormBtn(title) {
    const formBtn = document.createElement('button');
    formBtn.classList.add('form-btn');
    formBtn.textContent = title;
    return formBtn;
  }

  static createFormHidden(name, value) {
    const formHidden = document.createElement('input');
    formHidden.type = 'hidden';
    formHidden.value = value;
    formHidden.name = name;
    return formHidden;
  }

  static createFormNote(text) {
    const formNote = document.createElement('div');
    formNote.classList.add('form-note');
    formNote.innerHTML = text;
    return formNote;
  }

  createModal(titleText, bodyInner) {
    const main = document.createElement('div');
    main.classList.add('modal-window');
    main.tabIndex = -1;
    main.addEventListener('click', this.onClickClose.bind(this));
    main.addEventListener('keydown', ({ key }) => key === 'Escape' && this.close());

    const content = document.createElement('div');
    content.classList.add('modal-window__content');
    main.appendChild(content);

    const header = document.createElement('div');
    header.classList.add('modal-window__header');
    content.appendChild(header);

    const btnClose = document.createElement('button');
    btnClose.classList.add('modal-window__btn-close');
    btnClose.title = 'Закрити (Esc)';
    btnClose.addEventListener('click', this.onClickClose.bind(this));
    header.appendChild(btnClose);

    const title = document.createElement('div');
    title.classList.add('modal-window__title');
    title.textContent = titleText;
    header.appendChild(title);

    const xmlns = 'http://www.w3.org/2000/svg';
    const xlink = 'http://www.w3.org/1999/xlink';
    const btnCloseImg = document.createElementNS(xmlns, 'svg');
    btnCloseImg.classList.add('modal-window__btn-close-img');
    btnClose.appendChild(btnCloseImg);

    const btnCloseImgUse = document.createElementNS(xmlns, 'use');
    btnCloseImgUse.setAttributeNS(xlink, 'href', '/resourse/images/shared-sprite-icons.svg#icon-close');
    btnCloseImg.appendChild(btnCloseImgUse);

    const body = document.createElement('div');
    body.classList.add('modal-window__body');
    body.appendChild(bodyInner);
    content.appendChild(body);

    document.body.appendChild(main);

    this.modalWindow = main;
    this.body = body;
  }

  onClickClose(evt) {
    if (evt.target === evt.currentTarget) this.close();
  }

  close() {
    document.body.classList.remove('body--window-modal-open');
    this.modalWindow.classList.remove('modal-window--open');
    setTimeout(() => this.modalWindow.remove(), 500);
  }
};

window.modalWindowFeedbackError = () => {
  const form = document.createElement('form');
  form.classList.add('modal-window__form');

  const formHiddenType = window.ModalWindow.createFormHidden('type', 'error');
  form.appendChild(formHiddenType);

  const formInputName = window.ModalWindow.createFormInput({
    title: 'Ім\'я', name: 'name', placeholder: 'Iван', required: true
  });
  form.appendChild(formInputName);

  const formInputPhone = window.ModalWindow.createFormInput({
    title: 'Телефон', name: 'phone', placeholder: '+38(___)___-__-__', required: true, type: 'tel'
  });
  form.appendChild(formInputPhone);

  const formInputEmail = window.ModalWindow.createFormInput({
    title: 'Email', name: 'email', placeholder: 'user@example.com', type: 'email'
  });
  form.appendChild(formInputEmail);

  const formInputDescription = window.ModalWindow.createFormInput({
    title: 'Суть проблеми', name: 'description', placeholder: 'Опис проблеми...', required: true, element: 'textarea'
  });
  form.appendChild(formInputDescription);

  const formBtn = window.ModalWindow.createFormBtn('Надіслати повідомлення');
  form.appendChild(formBtn);

  const onSubmit = async evt => {
    evt.preventDefault();
    evt.target.querySelector('.form-btn').disabled = true;

    const body = JSON.stringify({
      type: form.type.value,
      name: form.name.value,
      phone: form.phone.value,
      email: form.email.value,
      description: form.description.value
    });

    let mwResponseText = 'Повідомлення успішно відправлено';
    let mwResponseClass = 'success';
    const url = '/index.php?route=api/feedback';
    try {
      const response = await fetch(url, { method: 'POST', body });
      if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);
    } catch (err) {
      mwResponseText = `Помилка відправлення: ${err.message}`;
      mwResponseClass = 'error';
    }

    const mwResponse = document.createElement('div');
    mwResponse.classList.add('modal-window__response', `modal-window__response--${mwResponseClass}`);
    mwResponse.textContent = mwResponseText;

    const modalWindowBody = evt.target.closest('.modal-window__body');
    evt.target.remove();
    modalWindowBody.appendChild(mwResponse);
  };

  form.addEventListener('submit', onSubmit);

  new window.ModalWindow('Повідомлення про помилку', form);
};

window.modalWindowFeedbackManager = () => {
  const form = document.createElement('form');
  form.classList.add('modal-window__form');

  const formNote = window.ModalWindow.createFormNote(`
    У вас виникли запитання, зауваження, пропозиції?<br>
    Заповніть, будь ласка, наступну форму.
    Ця інформація потрапить до керівництва компанії (директора та керівників підрозділів).
  `);
  form.appendChild(formNote);

  const formHiddenType = window.ModalWindow.createFormHidden('type', 'manager');
  form.appendChild(formHiddenType);

  const formInputName = window.ModalWindow.createFormInput({
    title: 'Ім\'я', name: 'name', placeholder: 'Iван', required: true
  });
  form.appendChild(formInputName);

  const formInputPhone = window.ModalWindow.createFormInput({
    title: 'Телефон', name: 'phone', placeholder: '+38(___)___-__-__', required: true, type: 'tel'
  });
  form.appendChild(formInputPhone);

  const formInputEmail = window.ModalWindow.createFormInput({
    title: 'Email', name: 'email', placeholder: 'user@example.com', type: 'email'
  });
  form.appendChild(formInputEmail);

  const formInputDescription = window.ModalWindow.createFormInput({
    title: 'Коментар', name: 'description', placeholder: 'Коментар', element: 'textarea'
  });
  form.appendChild(formInputDescription);

  const formBtn = window.ModalWindow.createFormBtn('Надіслати повідомлення');
  form.appendChild(formBtn);

  const onSubmit = async evt => {
    evt.preventDefault();
    evt.target.querySelector('.form-btn').disabled = true;

    const body = JSON.stringify({
      type: form.type.value,
      name: form.name.value,
      phone: form.phone.value,
      email: form.email.value,
      description: form.description.value
    });

    let mwResponseText = 'Повідомлення успішно відправлено';
    let mwResponseClass = 'success';
    const url = '/index.php?route=api/feedback';
    try {
      const response = await fetch(url, { method: 'POST', body });
      if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);
    } catch (err) {
      mwResponseText = `Помилка відправлення: ${err.message}`;
      mwResponseClass = 'error';
    }

    const mwResponse = document.createElement('div');
    mwResponse.classList.add('modal-window__response', `modal-window__response--${mwResponseClass}`);
    mwResponse.textContent = mwResponseText;

    const modalWindowBody = evt.target.closest('.modal-window__body');
    evt.target.remove();
    modalWindowBody.appendChild(mwResponse);
  };

  form.addEventListener('submit', onSubmit);

  new window.ModalWindow('Написати директору', form);
};

// Відкривати форму по посиланню
if (window.location.hash === '#manager') window.modalWindowFeedbackManager();

window.modalWindowLogin = () => {
  let modalWindow;

  const createFormRegister = () => {
    const form = window.ModalWindow.createFormElement();

    const formInputFirstName = window.ModalWindow.createFormInput({
      title: 'Ім\'я', name: 'firstName', placeholder: 'Iван', required: true, maxLength: 32
    });
    form.appendChild(formInputFirstName);

    const formInputLastName = window.ModalWindow.createFormInput({
      title: 'Прізвище', name: 'lastName', placeholder: 'Iванов', required: true, maxLength: 32
    });
    form.appendChild(formInputLastName);

    const phone = window.ModalWindow.createFormInputPhone({ title: 'Телефон', name: 'phone', required: true });
    const formInputPhone = phone.element;
    form.appendChild(formInputPhone);

    const formInputEmail = window.ModalWindow.createFormInput({
      title: 'Email', name: 'email', placeholder: 'user@example.com', type: 'email', required: true, maxLength: 96
    });
    form.appendChild(formInputEmail);

    const formInputPasswordConfirm = window.ModalWindow.createFormInputPassword({
      title: 'Повторіть пароль', name: 'confirm', isConfirm: true, required: true
    });

    const formInputPassword = window.ModalWindow.createFormInputPassword({
      title: 'Пароль',
      name: 'password',
      required: true,
      confirmElement: formInputPasswordConfirm.querySelector('.form-input__input'),
      minLength: 4,
      maxLength: 20
    });

    form.appendChild(formInputPassword);
    form.appendChild(formInputPasswordConfirm);

    const recaptchaScript = document.createElement('script');
    recaptchaScript.src = '//www.google.com/recaptcha/api.js?hl=ru';
    form.appendChild(recaptchaScript);

    const recaptcha = document.createElement('div');
    recaptcha.classList.add('g-recaptcha', 'modal-window-login__recaptcha');
    recaptcha.dataset.sitekey = '6Le97jQbAAAAAPRfGkHDjfUe6vPdmKlaNnmsTtCI';
    form.appendChild(recaptcha);

    const termToAgree = document.createElement('div');
    termToAgree.classList.add('modal-window-login__term-to-agree');
    termToAgree.appendChild(document.createTextNode('Реєструючись, ви погоджуєтеся з '));
    form.appendChild(termToAgree);

    const linkTermToAgree = document.createElement('a');
    linkTermToAgree.classList.add('modal-window-login__term-to-link');
    linkTermToAgree.textContent = 'угодою користувача';
    linkTermToAgree.href = '/agree_to_terms';
    linkTermToAgree.target = '_blank';
    termToAgree.appendChild(linkTermToAgree);

    const formBtn = window.ModalWindow.createFormBtn('Реєстрація');
    form.appendChild(formBtn);

    const onSubmit = async evt => {
      evt.preventDefault();

      formBtn.disabled = true;
      recaptcha.classList.remove('modal-window-login__recaptcha--error');

      const url = '/index.php?route=api/register';
      const body = JSON.stringify({
        firstName: form.firstName.value,
        lastName: form.lastName.value,
        email: form.email.value,
        phone: phone.mask.unmaskedValue,
        password: form.password.value,
        captcha: window.grecaptcha.getResponse()
      });

      let errorText;
      try {
        const response = await fetch(url, { method: 'POST', body });
        const responseText = await response.text();
        if (response.ok) {
          window.location = responseText;
          return;
        }
        if (response.status === 400 && responseText === 'INVALID') {
          errorText = 'Помилка валідації';
        } else if (response.status === 400 && responseText === 'CAPTCHA') {
          errorText = 'Помилка капчі';
          window.grecaptcha.reset();
          recaptcha.classList.add('modal-window-login__recaptcha--error');
        } else if (response.status === 400 && responseText === 'USER_EXISTS') {
          errorText = 'Данний email вже зареєстрований';
        } else {
          throw new Error(`${response.status} ${response.statusText}`);
        }
      } catch (err) {
        errorText = `Помилка відправлення: ${err.message}`;
      }

      const modalWindowResponse = form.querySelector('.modal-window__response');
      if (modalWindowResponse) modalWindowResponse.remove();
      const responseElement = window.ModalWindow.createResponse(errorText, 'error');
      form.appendChild(responseElement);
      formBtn.disabled = false;
    };

    form.addEventListener('submit', onSubmit);
    return form;
  };

  const createFormLogin = () => {
    const form = window.ModalWindow.createFormElement();

    const formInputEmail = window.ModalWindow.createFormInput({
      title: 'Email', name: 'email', placeholder: 'user@example.com', type: 'email', required: true
    });
    form.appendChild(formInputEmail);

    const formInputPassword = window.ModalWindow.createFormInputPassword({
      title: 'Пароль', name: 'password', required: true
    });
    form.appendChild(formInputPassword);

    const wrapperBtnForgotten = document.createElement('div');
    wrapperBtnForgotten.classList.add('modal-window-login__wrapper-btn-forgotten');
    form.appendChild(wrapperBtnForgotten);

    const btnForgotten = document.createElement('button');
    btnForgotten.type = 'button';
    btnForgotten.classList.add('modal-window-login__btn-forgotten');
    btnForgotten.textContent = 'Забули пароль? Відновити.';
    wrapperBtnForgotten.appendChild(btnForgotten);

    const onClickRecovery = () => {
      modalWindow.close();
      window.modalWindowRecovery();
    };
    btnForgotten.addEventListener('click', onClickRecovery);

    const formBtn = window.ModalWindow.createFormBtn('Авторизуватися');
    form.appendChild(formBtn);

    const onSubmit = async evt => {
      evt.preventDefault();
      formBtn.disabled = true;

      const url = '/index.php?route=api/login';
      const body = JSON.stringify({
        email: form.email.value,
        password: form.password.value
      });

      let errorText;
      try {
        const response = await fetch(url, { method: 'POST', body });
        if (response.ok) return window.location.reload();

        const responseText = await response.text();
        if (response.status === 400 && responseText === 'ATTEMPTS') {
          errorText = 'Ви перевищили максимальну кількість спроб авторизації.'
            + ' Будь ласка, спробуйте авторизації на сайті через 1 годину';
        } else if (response.status === 401) {
          errorText = 'Неправильний email або пароль';
        } else {
          throw new Error(`${response.status} ${response.statusText}`);
        }
      } catch (err) {
        errorText = `Помилка відправлення: ${err.message}`;
      }

      const modalWindowResponse = form.querySelector('.modal-window__response');
      if (modalWindowResponse) modalWindowResponse.remove();
      const responseElement = window.ModalWindow.createResponse(errorText, 'error');
      form.appendChild(responseElement);
      formBtn.disabled = false;
    };

    form.addEventListener('submit', onSubmit);
    return form;
  };

  const content = document.createElement('div');

  const tabs = document.createElement('div');
  tabs.classList.add('modal-window-login__tabs');
  content.appendChild(tabs);

  const btnRegister = document.createElement('button');
  btnRegister.type = 'button';
  btnRegister.classList.add('modal-window-login__tab');
  btnRegister.textContent = 'Реєстрація';
  tabs.appendChild(btnRegister);

  const btnLogin = document.createElement('button');
  btnLogin.type = 'button';
  btnLogin.classList.add('modal-window-login__tab', 'modal-window-login__tab--active');
  btnLogin.textContent = 'Авторизація';
  tabs.appendChild(btnLogin);

  let formRegister;
  const formLogin = createFormLogin();

  const onClickTab = ({ target }) => {
    if (target.classList.contains('modal-window-login__tab--active')) return;

    btnRegister.classList.toggle('modal-window-login__tab--active');
    btnLogin.classList.toggle('modal-window-login__tab--active');

    if (!formRegister) {
      formRegister = createFormRegister();
      content.appendChild(formRegister);
    } else {
      formRegister.classList.toggle('modal-window__form--hidden');
    }

    formLogin.classList.toggle('modal-window__form--hidden');
  };

  btnRegister.addEventListener('click', onClickTab);
  btnLogin.addEventListener('click', onClickTab);

  content.appendChild(formLogin);

  modalWindow = new window.ModalWindow('', content);
};

window.modalWindowRecovery = () => {
  const form = window.ModalWindow.createFormElement();

  const title = document.createElement('div');
  title.classList.add('modal-window-recovery__title');
  title.textContent = 'Вкажіть email і ми надішлемо посилання для відновлення пароля';
  form.appendChild(title);

  const formInputEmail = window.ModalWindow.createFormInput({
    title: 'Email', name: 'email', placeholder: 'user@example.com', type: 'email', required: true
  });
  form.appendChild(formInputEmail);

  const formBtn = window.ModalWindow.createFormBtn('Надіслати');
  form.appendChild(formBtn);

  const onSubmit = async evt => {
    evt.preventDefault();
    formBtn.disabled = true;

    const body = JSON.stringify({ email: form.email.value });
    const url = '/index.php?route=api/recovery';

    let errorText;
    try {
      const response = await fetch(url, { method: 'POST', body });
      if (response.ok) {
        const responseText = 'Посилання для відновлення паролю відіслане на email';
        const responseElement = window.ModalWindow.createResponse(responseText, 'success');
        evt.target.parentElement.appendChild(responseElement);
        evt.target.remove();
        return;
      }

      const responseText = await response.text();
      if (response.status === 400 && responseText === 'USER_EXISTS') {
        errorText = 'Email не знайдено, перевірте та спопробуйте ще раз!';
      } else {
        throw new Error(`${response.status} ${response.statusText}`);
      }
    } catch (err) {
      errorText = `Помилка відправлення: ${err.message}`;
    }

    const modalWindowResponse = form.querySelector('.modal-window__response');
    if (modalWindowResponse) modalWindowResponse.remove();
    const responseElement = window.ModalWindow.createResponse(errorText, 'error');
    form.appendChild(responseElement);
    formBtn.disabled = false;
  };

  form.addEventListener('submit', onSubmit);
  new window.ModalWindow('Забули пароль?', form);
};

window.modalWindowBuy = productId => {
  const form = window.ModalWindow.createFormElement();

  const phone = window.ModalWindow.createFormInputPhone({
    title: 'Телефон', name: 'phone', required: true, value: window.customerPhone
  });
  const formInputPhone = phone.element;
  form.appendChild(formInputPhone);

  const formBtn = window.ModalWindow.createFormBtn('Надіслати');
  form.appendChild(formBtn);

  const onSubmit = async evt => {
    evt.preventDefault();
    formBtn.disabled = true;

    const url = '/index.php?route=api/buy';
    const body = JSON.stringify({
      phone: phone.mask.unmaskedValue,
      productId
    });

    let errorText;
    try {
      const response = await fetch(url, { method: 'POST', body });
      if (response.ok) {
        const responseText = 'Дкуємо за покупку. Протягом 15 хвилин з вами зв\'яжуться для оформлення замовлення';
        const responseElement = window.ModalWindow.createResponse(responseText, 'success');
        evt.target.parentElement.appendChild(responseElement);
        evt.target.remove();
        return;
      }

      const responseText = await response.text();
      if (response.status === 400 && responseText === 'INVALID') {
        errorText = 'Помилка валідації';
      } else {
        throw new Error(`${response.status} ${response.statusText}`);
      }
    } catch (err) {
      errorText = `Помилка відправлення: ${err.message}`;
    }

    const modalWindowResponse = form.querySelector('.modal-window__response');
    if (modalWindowResponse) modalWindowResponse.remove();
    const responseElement = window.ModalWindow.createResponse(errorText, 'error');
    form.appendChild(responseElement);
    formBtn.disabled = false;
  };

  form.addEventListener('submit', onSubmit);
  new window.ModalWindow('Купити в 1 клік', form);
};

window.modalWindowFavorites = async productId => {
  const createBtn = (isInsert, id) => {
    const onClickBtn = async ({ target }) => {
      target.disabled = true;
      const { type } = target.dataset;

      try {
        const url = `/index.php?route=api/${type}FavoriteProduct`;
        const body = JSON.stringify({ favoriteId: target.dataset.id, productId });

        const response = await fetch(url, { method: 'POST', body });
        if (response.ok) {
          target.parentElement.appendChild(createBtn(type === 'remove' ? 0 : 1, target.dataset.id));
          target.remove();
        } else {
          throw new Error(`${response.status} ${response.statusText}`);
        }
      } catch (err) {
        console.error(err);
      }
    };

    const itemBtn = document.createElement('button');
    itemBtn.classList.add('modal-window-favorites__item-btn');
    itemBtn.title = isInsert ? 'Видалити з обраного' : 'Додати до обраного';
    itemBtn.dataset.id = id;
    itemBtn.dataset.type = isInsert ? 'remove' : 'add';
    itemBtn.addEventListener('click', onClickBtn);

    const xmlns = 'http://www.w3.org/2000/svg';
    const xlink = 'http://www.w3.org/1999/xlink';
    const itemBtnImg = document.createElementNS(xmlns, 'svg');
    const iconName = isInsert ? 'minus' : 'plus';
    const itemBtnImgClass = `modal-window-favorites__item-btn-img--${iconName}`;
    itemBtnImg.classList.add('modal-window-favorites__item-btn-img', itemBtnImgClass);
    itemBtn.appendChild(itemBtnImg);

    const itemBtnImgUse = document.createElementNS(xmlns, 'use');
    itemBtnImgUse.setAttributeNS(xlink, 'href', `/resourse/images/shared-sprite-icons.svg#icon-${iconName}`);
    itemBtnImg.appendChild(itemBtnImgUse);

    itemBtn.appendChild(document.createTextNode(isInsert ? 'Видалити' : 'Додати'));
    return itemBtn;
  };

  const createItem = responseItem => {
    const item = document.createElement('li');
    item.classList.add('modal-window-favorites__item');

    const itemTitle = document.createElement('span');
    itemTitle.classList.add('modal-window-favorites__item-title');
    itemTitle.textContent = responseItem.name;
    item.appendChild(itemTitle);
    item.appendChild(createBtn(+responseItem.isInsert, responseItem.id));
    return item;
  };

  let main;
  let errorText;

  try {
    const url = '/index.php?route=api/getFavorites';
    const body = JSON.stringify({ productId });

    const response = await fetch(url, { method: 'POST', body });
    if (response.ok) {
      main = document.createElement('ul');
      main.classList.add('modal-window-favorites__list');
      const data = await response.json();

      if (data.length) {
        data.forEach(el => main.appendChild(createItem(el)));
      } else {
        main = document.createElement('div');
        main.classList.add('modal-window__response', 'modal-window__response--success');
        main.appendChild(document.createTextNode('Список обраного відсутній. '));
        const erroLink = document.createElement('a');
        erroLink.classList = 'modal-window-favorites__error-link';
        erroLink.textContent = 'Додати';
        erroLink.href = '/index.php?route=account#favorites';
        main.appendChild(erroLink);
        main.appendChild(document.createTextNode(' новий список'));
      }
    } else {
      const responseText = await response.text();
      if (response.status === 400 && responseText === 'INVALID') {
        errorText = 'Помилка валідації';
      } else {
        throw new Error(`${response.status} ${response.statusText}`);
      }
    }
  } catch (err) {
    errorText = `Помилка відправлення: ${err.message}`;
  }

  if (errorText) main = window.ModalWindow.createResponse(errorText, 'error');
  new window.ModalWindow('Виберіть список обраного', main);
};

window.modalWindowWishlist = async productId => {
  let textResult;
  let hasError = true;

  try {
    const url = '/index.php?route=api/wishlist';
    const body = JSON.stringify({ productId });

    const response = await fetch(url, { method: 'POST', body });
    if (response.ok) {
      textResult = 'Товар додано! Надішлемо email, при появі товара на складі!';
      hasError = false;
    } else {
      const responseText = await response.text();
      if (response.status === 400 && responseText === 'INVALID') {
        textResult = 'Помилка валідації';
      } else {
        throw new Error(`${response.status} ${response.statusText}`);
      }
    }
  } catch (err) {
    textResult = `Помилка відправлення: ${err.message}`;
  }

  const main = window.ModalWindow.createResponse(textResult, hasError ? 'error' : 'success');
  new window.ModalWindow('Повідомити про наявність', main);
};

const setHeaderCartCounter = count => {
  const headerCartCounter = document.getElementById('headerCartCounter');
  if (!headerCartCounter) return;
  if (count) {
    headerCartCounter.textContent = count;
    headerCartCounter.classList.remove('btn-header-action__counter--hidden');
  } else {
    headerCartCounter.classList.add('btn-header-action__counter--hidden');
  }
};

// ===================================================================

const initCart = () => {
  const cart = document.getElementById('cart');
  if (!cart) return;
  const onCartClose = () => document.body.classList.remove('body--cart-open');
  cart.addEventListener('click', evt => evt.target === evt.currentTarget && onCartClose());

  const cartClose = cart.querySelector('.cart__btn-close');
  cartClose.addEventListener('click', onCartClose);

  // ===================================================================

  const cartContainer = cart.querySelector('.cart__container');
  const cartWrapper = cart.querySelector('.cart__wrapper');

  const setCartContainerHeight = height => cartContainer.style.setProperty('--height', height);
  const onResizeCart = () => setCartContainerHeight(`${cartWrapper.scrollHeight}px`);
  const onResizeCartThrottle = window.shared.throttle(onResizeCart, 500);

  window.cartOpen = () => {
    document.body.classList.toggle('body--cart-open');
    if (document.body.classList.contains('body--cart-open')) {
      onResizeCartThrottle();
      window.addEventListener('resize', onResizeCartThrottle);
    } else {
      window.removeEventListener('resize', onResizeCartThrottle);
    }
  };

  // ===================================================================

  const cartClear = cart.querySelector('.cart__clear');
  if (cartClear) {
    const onClickCartClear = async evt => {
      evt.target.disabled = true;

      const url = '/index.php?route=shared/cart/clear';
      try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);
        window.cartGet();
      } catch (err) {
        console.error(err.message);
      }

      setHeaderCartCounter(0);
      onCartClose();
      evt.target.disabled = false;
    };

    cartClear.addEventListener('click', onClickCartClear);
  }

  // ============================================================================

  const cartTotalSumUAH = document.getElementById('cartTotalSumUAH');
  const cartTotalSumUSD = document.getElementById('cartTotalSumUSD');

  const onClickCartItemRemove = async evt => {
    evt.target.disabled = true;
    const item = evt.target.closest('.cart__item');
    const body = JSON.stringify({ id: item.dataset.id });
    const url = '/index.php?route=shared/cart/remove';

    try {
      const response = await fetch(url, { method: 'POST', body });
      if (response.ok) {
        const responseJSON = await response.json();
        setHeaderCartCounter(responseJSON.totalQuantity);
        if (!responseJSON.totalQuantity) {
          onCartClose();
          window.cartGet();
          return;
        }
        cartTotalSumUAH.textContent = responseJSON.totalUAH;
        cartTotalSumUSD.textContent = responseJSON.totalUSD;
        item.remove();
        return;
      }
      throw new Error(`${response.status} ${response.statusText}`);
    } catch (err) {
      console.error(err.message);
    }
  };

  const cartItemRemoveList = cart.querySelectorAll('.cart__item-remove');
  if (cartItemRemoveList) cartItemRemoveList.forEach(el => el.addEventListener('click', onClickCartItemRemove));

  // ============================================================================

  const cartItemQuantityBtnList = cart.querySelectorAll('.cart__item-quantity-btn');
  if (cartItemQuantityBtnList) {
    const onClickCartItemQuntityBtn = async ({ target }) => {
      target.disabled = true;
      const item = target.closest('.cart__item');
      const btnMinus = item.querySelector('.cart__item-quantity-btn--minus');
      const btnPlus = item.querySelector('.cart__item-quantity-btn--plus');
      const isMinus = target.classList.contains('cart__item-quantity-btn--minus');

      const quantity = isMinus ? -1 : 1;
      const cartResponse = await window.cartAdd(item.dataset.id, quantity);

      cartTotalSumUAH.textContent = cartResponse.totalUAH;
      cartTotalSumUSD.textContent = cartResponse.totalUSD;
      btnMinus.disabled = cartResponse.quantity === 1;
      btnPlus.disabled = cartResponse.isMaxQuantity;
      item.querySelector('.cart__item-quantity-input').value = cartResponse.quantity;
    };

    cartItemQuantityBtnList.forEach(el => el.addEventListener('click', onClickCartItemQuntityBtn));
  }
};

initCart();

// ============================================================================

window.cartGet = async () => {
  const url = '/index.php?route=shared/cart/get';

  try {
    const response = await fetch(url);
    const responseText = await response.text();
    if (response.ok) {
      document.getElementById('cart').remove();
      document.body.insertAdjacentHTML('beforeend', responseText);
      initCart();
      return;
    }
    throw new Error(`${response.status} ${response.statusText}`);
  } catch (err) {
    console.error(err);
  }
};

// ============================================================================

window.cartAdd = async (id, quantity = 1) => {
  const url = '/index.php?route=shared/cart/add';
  const body = JSON.stringify({ id, quantity });

  let errorText;
  try {
    const response = await fetch(url, { method: 'POST', body });
    if (response.ok) {
      const responseJSON = await response.json();
      setHeaderCartCounter(responseJSON.totalQuantity);
      return responseJSON;
    }

    const responseText = await response.text();
    if (response.status === 400 && responseText === 'MAX_QUANTITY') {
      errorText = 'Недостатньо товарів на складі';
    } else {
      throw new Error(`${response.status} ${response.statusText}`);
    }
  } catch (err) {
    errorText = err.message;
  }

  new window.ModalWindow('Помилка', document.createTextNode(errorText));
  return false;
};

window.cartToast = imageSrc => {
  const main = document.createElement('div');

  const close = () => {
    main.classList.remove('cart-toast--open');
    setTimeout(() => main.remove(), 500);
  };

  main.classList.add('cart-toast');

  const image = document.createElement('img');
  image.classList.add('cart-toast__image');
  image.src = imageSrc;
  main.appendChild(image);

  const text = document.createElement('div');
  text.classList.add('cart-toast__text');
  main.appendChild(text);
  text.appendChild(document.createTextNode('Товар додано до '));

  const link = document.createElement('a');
  link.classList.add('cart-toast__text-link');
  link.href = '/index.php?route=checkout';
  link.textContent = 'кошика';
  text.appendChild(link);

  main.appendChild(text);

  const header = document.createElement('div');
  header.classList.add('modal-window__header');
  text.appendChild(header);

  const btnClose = document.createElement('button');
  btnClose.classList.add('cart-toast__btn-close');
  btnClose.title = 'Закрити';
  btnClose.addEventListener('click', close);
  main.appendChild(btnClose);

  const xmlns = 'http://www.w3.org/2000/svg';
  const xlink = 'http://www.w3.org/1999/xlink';
  const btnCloseImg = document.createElementNS(xmlns, 'svg');
  btnCloseImg.classList.add('cart-toast__btn-close-icon');
  btnClose.appendChild(btnCloseImg);

  const btnCloseImgUse = document.createElementNS(xmlns, 'use');
  btnCloseImgUse.setAttributeNS(xlink, 'href', '/resourse/images/shared-sprite-icons.svg#icon-close');
  btnCloseImg.appendChild(btnCloseImgUse);

  document.body.appendChild(main);

  setTimeout(() => main.classList.add('cart-toast--open'), 10);
  setTimeout(close, 2000);
};

//# sourceMappingURL=shared.min.js.map
