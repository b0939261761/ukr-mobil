window.shared = {};

window.shared.throttle = (callback, wait, immediate = false) => {
  let timeout = null;
  let initialCall = true;

  return (...args) => {
    const callNow = immediate && initialCall;

    const run = () => {
      callback(args);
      timeout = null;
    };

    if (callNow) {
      initialCall = false;
      run();
    }

    if (!timeout) timeout = setTimeout(run, wait);
  };
};

const headerBanner = document.getElementById('headerBanner');

if (headerBanner) {
  const onResizeHeaderBanner = () => {
    const { height } = headerBanner.getBoundingClientRect();
    document.body.style.setProperty('--header-banner-top', `${height}px`);
  };
  const onResizeHeaderBannerThrottle = window.shared.throttle(onResizeHeaderBanner, 1000, true);
  onResizeHeaderBannerThrottle();

  window.addEventListener('resize', onResizeHeaderBannerThrottle);
}

const footerWindowModalFeedbackError = document.getElementById('footerWindowModalFeedbackError');
footerWindowModalFeedbackError.addEventListener('click', () => window.modalWindowFeedbackError());

const footerWindowModalFeedbackManager = document.getElementById('footerWindowModalFeedbackManager');
footerWindowModalFeedbackManager.addEventListener('click', () => window.modalWindowFeedbackManager());

const btnScrollToTopEl = document.getElementById('btnScrollToTop');
const onClickbtnScrollToTop = () => window.scrollTo({ left: 0, top: 0, behavior: 'smooth' });
btnScrollToTopEl.addEventListener('click', onClickbtnScrollToTop);

const onHide = entries => {
  entries.forEach(({ isIntersecting }) => {
    isIntersecting
      ? btnScrollToTopEl.classList.add('footer-btn-scroll-to-top--hide')
      : btnScrollToTopEl.classList.remove('footer-btn-scroll-to-top--hide');
  });
};

const interseptorHideFooterBtnScrollToTop = document.createElement('div');
interseptorHideFooterBtnScrollToTop.classList.add('interseptor-hide-footer-btn-scroll-to-top');
document.body.appendChild(interseptorHideFooterBtnScrollToTop);

(new IntersectionObserver(onHide)).observe(interseptorHideFooterBtnScrollToTop);

const onDock = entries => {
  entries.forEach(({ isIntersecting }) => {
    isIntersecting
      ? btnScrollToTopEl.classList.remove('footer-btn-scroll-to-top--float')
      : btnScrollToTopEl.classList.add('footer-btn-scroll-to-top--float');
  });
};

(new IntersectionObserver(onDock))
  .observe(document.getElementById('interseptorDockFooterBtnScrollToTop'));

const navCategoriesListActivate = row => {
  if (!window.matchMedia('(min-width: 1080px)').matches) return;
  const navCategoriesList = row.querySelector('.nav-catalog__list');
  if (navCategoriesList) navCategoriesList.classList.add('nav-catalog__list--is-visible');
};

const deactivateCategoriesListActivate = row => {
  if (!window.matchMedia('(min-width: 1080px)').matches) return;
  const navCategoriesList = row.querySelector('.nav-catalog__list');
  if (navCategoriesList) navCategoriesList.classList.remove('nav-catalog__list--is-visible');
};

$('.nav-catalog__list').menuAim({
  activate: navCategoriesListActivate,
  deactivate: deactivateCategoriesListActivate,
  exitMenu: () => true
});

const navCategoriesBtnNavList = document.querySelectorAll('.nav-catalog__link--has-children');
const onClickNavCategoriesBtnNav = evt => {
  if (window.matchMedia('(min-width: 1080px)').matches) return;
  evt.preventDefault();
  const navCategoriesList = evt.target.parentElement.querySelector('.nav-catalog__list');
  if (navCategoriesList) navCategoriesList.classList.add('nav-catalog__list--is-visible');
};
navCategoriesBtnNavList.forEach(el => el.addEventListener('click', onClickNavCategoriesBtnNav));

const header = document.getElementById('header');
const mobileMenu = document.getElementById('mobileMenu');
const btnMobileMenu = document.getElementById('btnMobileMenu');

window.setMobileMenuTop = () => {
  const { top, height } = header.getBoundingClientRect();
  mobileMenu.style.setProperty('--mobile-menu-top', `${height + top}px`);
};

const onClickBtnMobileMenu = () => {
  if (document.body.classList.contains('body--mobile-menu-open')) {
    document.body.classList.remove('body--mobile-menu-catalog-open');
    const navCategoriesList = document.querySelectorAll('.nav-catalog__list--is-visible');
    navCategoriesList.forEach(el => el.classList.remove('nav-catalog__list--is-visible'));
  } else {
    window.setMobileMenuTop();
  }

  document.body.classList.toggle('body--mobile-menu-open');
};

btnMobileMenu.addEventListener('click', onClickBtnMobileMenu);

// ------------------------------------------------------------------

const btnHeaderMenuEl = document.getElementById('btnHeaderMenu');

const onClickBtnHeaderMenu = evt => {
  if (evt.target !== evt.currentTarget) return;
  if (!document.body.classList.contains('body--mobile-menu-open')) window.setMobileMenuTop();
  document.body.classList.toggle('body--mobile-menu-open');
};

btnHeaderMenuEl.addEventListener('click', onClickBtnHeaderMenu);
mobileMenu.addEventListener('click', onClickBtnHeaderMenu);

// ------------------------------------------------------------------

const btnMobileMenuCategories = document.getElementById('btnMobileMenuCategories');

const onClickBtnMobileMenuCategories = () => {
  if (document.body.classList.contains('body--mobile-menu-catalog-open')) {
    const navCategoriesList = document.querySelectorAll('.nav-catalog__list--is-visible');
    if (!navCategoriesList.length) {
      document.body.classList.remove('body--mobile-menu-catalog-open');
      return;
    }
    const navCategoriesListLast = navCategoriesList[navCategoriesList.length - 1];
    navCategoriesListLast.classList.remove('nav-catalog__list--is-visible');
  } else {
    document.body.classList.add('body--mobile-menu-catalog-open');
  }
};

btnMobileMenuCategories.addEventListener('click', onClickBtnMobileMenuCategories);

// ------------------------------------------------------------------

const mmWindowModalFeedbackError = document.getElementById('mmWindowModalFeedbackError');
mmWindowModalFeedbackError.addEventListener('click', () => window.modalWindowFeedbackError());

const mmWindowModalFeedbackManager = document.getElementById('mmWindowModalFeedbackManager');
mmWindowModalFeedbackManager.addEventListener('click', () => window.modalWindowFeedbackManager());

// ------------------------------------------------------------------

const wrapperMobileMenuContacts = document.getElementById('wrapperMobileMenuContacts');

const setMobileMenuContactsHeight = height => wrapperMobileMenuContacts.style.setProperty('--height', height);

const onResizeMobileMenuContacts = () => console.log(wrapperMobileMenuContacts.firstElementChild.scrollHeight) || setMobileMenuContactsHeight(`${wrapperMobileMenuContacts.firstElementChild.scrollHeight}px`);
const onResizeMobileMenuContactsThrottle = window.shared.throttle(onResizeMobileMenuContacts, 500);

const onClickMobileMenuBtnContact = () => {
  if (wrapperMobileMenuContacts.style.getPropertyValue('--height')) {
    setMobileMenuContactsHeight(null);
    window.removeEventListener('resize', onResizeMobileMenuContactsThrottle);
  } else {
    onResizeMobileMenuContacts();
    window.addEventListener('resize', onResizeMobileMenuContactsThrottle);
  }
};

const mobileMenuBtnContact = document.getElementById('mobileMenuBtnContact');
mobileMenuBtnContact.addEventListener('click', onClickMobileMenuBtnContact);

window.ModalWindow = class {
  constructor(titleText, bodyInner) {
    this.createModal(titleText, bodyInner);
    document.body.classList.add('body--window-modal-open');
    this.modalWindow.classList.add('modal-window--open');
    this.modalWindow.focus();

    setTimeout(() => {
    },
    50);
  }

  static createFormInput({
    title, name, placeholder, required, type, element = 'input'
  }) {
    const formInput = document.createElement('label');
    formInput.classList.add('form-input');

    const formInputTitle = document.createElement('div');
    formInputTitle.classList.add('form-input__title');
    formInput.appendChild(formInputTitle);

    formInputTitle.appendChild(document.createTextNode(title));

    if (required) {
      const inputNameTitleRequired = document.createElement('span');
      inputNameTitleRequired.classList.add('form-input__title-required');
      inputNameTitleRequired.textContent = '*';
      formInputTitle.appendChild(inputNameTitleRequired);
    }

    const inputNameInput = document.createElement(element);
    inputNameInput.classList.add(`form-input__${element}`);
    inputNameInput.name = name;
    inputNameInput.placeholder = placeholder;
    if (required) inputNameInput.required = true;
    if (type) inputNameInput.type = type;
    formInput.appendChild(inputNameInput);

    return formInput;
  }

  static createFormBtn() {
    const formBtn = document.createElement('button');
    formBtn.classList.add('form-btn');
    formBtn.textContent = 'Надіслати повідомлення';
    return formBtn;
  }

  static createFormHidden(name, value) {
    const formHidden = document.createElement('input');
    formHidden.type = 'hidden';
    formHidden.value = value;
    formHidden.name = name;
    return formHidden;
  }

  static createFormNote(text) {
    const formNote = document.createElement('div');
    formNote.classList.add('form-note');
    formNote.innerHTML = text;
    return formNote;
  }

  createModal(titleText, bodyInner) {
    const main = document.createElement('div');
    main.classList.add('modal-window');
    main.tabIndex = -1;
    main.addEventListener('click', this.onClickClose.bind(this));
    main.addEventListener('keydown', ({ key }) => key === 'Escape' && this.close());

    const content = document.createElement('div');
    content.classList.add('modal-window__content');
    main.appendChild(content);

    const header = document.createElement('div');
    header.classList.add('modal-window__header');
    content.appendChild(header);

    const btnClose = document.createElement('button');
    btnClose.classList.add('modal-window__btn-close');
    btnClose.title = 'Закрити (Esc)';
    btnClose.addEventListener('click', this.onClickClose.bind(this));
    header.appendChild(btnClose);

    const title = document.createElement('div');
    title.classList.add('modal-window__title');
    title.textContent = titleText;
    header.appendChild(title);

    const xmlns = 'http://www.w3.org/2000/svg';
    const xlink = 'http://www.w3.org/1999/xlink';
    const btnCloseImg = document.createElementNS(xmlns, 'svg');
    btnCloseImg.classList.add('modal-window__btn-close-img');
    btnClose.appendChild(btnCloseImg);

    const btnCloseImgUse = document.createElementNS(xmlns, 'use');
    btnCloseImgUse.setAttributeNS(xlink, 'href', '/resourse/images/shared-sprite-icons.svg#icon-close');
    btnCloseImg.appendChild(btnCloseImgUse);

    const body = document.createElement('div');
    body.classList.add('modal-window__body');
    body.appendChild(bodyInner);
    content.appendChild(body);

    document.body.appendChild(main);

    this.modalWindow = main;
    this.body = body;
  }

  onClickClose(evt) {
    if (evt.target === evt.currentTarget) this.close();
  }

  close() {
    document.body.classList.remove('body--window-modal-open');
    this.modalWindow.classList.remove('modal-window--open');
    setTimeout(() => this.modalWindow.remove(), 500);
  }
};

window.modalWindowFeedbackError = () => {
  const form = document.createElement('form');
  form.classList.add('modal-window__form');

  const formHiddenType = window.ModalWindow.createFormHidden('type', 'error');
  form.appendChild(formHiddenType);

  const formInputName = window.ModalWindow.createFormInput({
    title: 'Ім\'я', name: 'name', placeholder: 'Iван', required: true
  });
  form.appendChild(formInputName);

  const formInputPhone = window.ModalWindow.createFormInput({
    title: 'Телефон', name: 'phone', placeholder: '+38(___)___-__-__', required: true, type: 'tel'
  });
  form.appendChild(formInputPhone);

  const formInputEmail = window.ModalWindow.createFormInput({
    title: 'Email', name: 'email', placeholder: 'user@example.com', type: 'email'
  });
  form.appendChild(formInputEmail);

  const formInputDescription = window.ModalWindow.createFormInput({
    title: 'Суть проблеми', name: 'description', placeholder: 'Опис проблеми...', required: true, element: 'textarea'
  });
  form.appendChild(formInputDescription);

  const formBtn = window.ModalWindow.createFormBtn();
  form.appendChild(formBtn);

  const onSubmit = async evt => {
    evt.preventDefault();
    evt.target.querySelector('.form-btn').disabled = true;

    const body = JSON.stringify({
      type: form.type.value,
      name: form.name.value,
      phone: form.phone.value,
      email: form.email.value,
      description: form.description.value
    });

    let mwResponseText = 'Повідомлення успішно відправлено';
    let mwResponseClass = 'success';
    const url = '/index.php?route=api/feedback';
    try {
      const response = await fetch(url, { method: 'POST', body });
      if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);
    } catch (err) {
      mwResponseText = `Помилка відправлення: ${err.message}`;
      mwResponseClass = 'error';
    }

    const mwResponse = document.createElement('div');
    mwResponse.classList.add('modal-window__response', `modal-window__response--${mwResponseClass}`);
    mwResponse.textContent = mwResponseText;

    const modalWindowBody = evt.target.closest('.modal-window__body');
    evt.target.remove();
    modalWindowBody.appendChild(mwResponse);
  };

  form.addEventListener('submit', onSubmit);

  new window.ModalWindow('Повідомлення про помилку', form);
};

window.modalWindowFeedbackManager = () => {
  const form = document.createElement('form');
  form.classList.add('modal-window__form');

  const formNote = window.ModalWindow.createFormNote(`
    У вас виникли запитання, зауваження, пропозиції?<br>
    Заповніть, будь ласка, наступну форму.
    Ця інформація потрапить до керівництва компанії (директора та керівників підрозділів).
  `);
  form.appendChild(formNote);

  const formHiddenType = window.ModalWindow.createFormHidden('type', 'manager');
  form.appendChild(formHiddenType);

  const formInputName = window.ModalWindow.createFormInput({
    title: 'Ім\'я', name: 'name', placeholder: 'Iван', required: true
  });
  form.appendChild(formInputName);

  const formInputPhone = window.ModalWindow.createFormInput({
    title: 'Телефон', name: 'phone', placeholder: '+38(___)___-__-__', required: true, type: 'tel'
  });
  form.appendChild(formInputPhone);

  const formInputEmail = window.ModalWindow.createFormInput({
    title: 'Email', name: 'email', placeholder: 'user@example.com', type: 'email'
  });
  form.appendChild(formInputEmail);

  const formInputDescription = window.ModalWindow.createFormInput({
    title: 'Коментар', name: 'description', placeholder: 'Коментар', element: 'textarea'
  });
  form.appendChild(formInputDescription);

  const formBtn = window.ModalWindow.createFormBtn();
  form.appendChild(formBtn);

  const onSubmit = async evt => {
    evt.preventDefault();
    evt.target.querySelector('.form-btn').disabled = true;

    const body = JSON.stringify({
      type: form.type.value,
      name: form.name.value,
      phone: form.phone.value,
      email: form.email.value,
      description: form.description.value
    });

    let mwResponseText = 'Повідомлення успішно відправлено';
    let mwResponseClass = 'success';
    const url = '/index.php?route=api/feedback';
    try {
      const response = await fetch(url, { method: 'POST', body });
      if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);
    } catch (err) {
      mwResponseText = `Помилка відправлення: ${err.message}`;
      mwResponseClass = 'success';
    }

    const mwResponse = document.createElement('div');
    mwResponse.classList.add('modal-window__response', `modal-window__response--${mwResponseClass}`);
    mwResponse.textContent = mwResponseText;

    const modalWindowBody = evt.target.closest('.modal-window__body');
    evt.target.remove();
    modalWindowBody.appendChild(mwResponse);
  };

  form.addEventListener('submit', onSubmit);

  new window.ModalWindow('Написати директору', form);
};

// Відкривати форму по посиланню
if (window.location.hash === '#manager') window.modalWindowFeedbackManager();

//# sourceMappingURL=shared.min.js.map
